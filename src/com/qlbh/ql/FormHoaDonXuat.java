/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.qlbh.ql;

import ConnectDtb.DatabaseConnection;
import com.qlbh.main.FormMain;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
/**
 *
 * @author MINH TUNG
 */
public class FormHoaDonXuat extends javax.swing.JFrame {

    /**
     * Creates new form FormHoaDon
     */
    public FormHoaDonXuat() {
        initComponents();
        loadDataToTableHoaDon();
        loadMaNhanVienToComboBox();
        loadTenSPToComboBox();
        setLocationRelativeTo(null);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        javax.swing.JPanel jpDanhSachHangHoa = new javax.swing.JPanel();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        txtMaHoaDon = new javax.swing.JTextField();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        txtMaKhachHang = new javax.swing.JTextField();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel6 = new javax.swing.JLabel();
        txtNgayLap = new javax.swing.JTextField();
        txtTenNV = new javax.swing.JTextField();
        javax.swing.JLabel jLabel8 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel9 = new javax.swing.JLabel();
        txtSDTNV = new javax.swing.JTextField();
        javax.swing.JLabel jLabel18 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel = new javax.swing.JLabel();
        javax.swing.JLabel jLabel10 = new javax.swing.JLabel();
        cBGioiTinh = new javax.swing.JComboBox<>();
        javax.swing.JLabel jLabel11 = new javax.swing.JLabel();
        txtDiaChi = new javax.swing.JTextField();
        javax.swing.JLabel jLabel19 = new javax.swing.JLabel();
        txtThanhTien = new javax.swing.JTextField();
        javax.swing.JLabel jLabel7 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel20 = new javax.swing.JLabel();
        txtMaSP = new javax.swing.JTextField();
        txtTenKH = new javax.swing.JTextField();
        txtSDTKH = new javax.swing.JTextField();
        tfSoLuong = new javax.swing.JTextField();
        cBMaNV = new javax.swing.JComboBox<>();
        cBTenSP = new javax.swing.JComboBox<>();
        txtDonGia = new javax.swing.JTextField();
        javax.swing.JLabel jLabel12 = new javax.swing.JLabel();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        tableHoaDon = new javax.swing.JTable();
        javax.swing.JButton btnXoaHD = new javax.swing.JButton();
        javax.swing.JButton btnThoat = new javax.swing.JButton();
        javax.swing.JButton btnSuaHD = new javax.swing.JButton();
        javax.swing.JButton btnThemHD = new javax.swing.JButton();
        javax.swing.JButton btnCTHD = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Winmart- Quản  lý hóa đơn");

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Hóa Đơn Bán Hàng");

        jpDanhSachHangHoa.setBackground(new java.awt.Color(255, 255, 51));
        jpDanhSachHangHoa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh Sách Hóa Đơn", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 16))); // NOI18N
        jpDanhSachHangHoa.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Mã Hóa Đơn");

        txtMaHoaDon.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtMaHoaDon.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMaHoaDonFocusLost(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Tên Nhân Viên");

        txtMaKhachHang.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtMaKhachHang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaKhachHangActionPerformed(evt);
            }
        });
        txtMaKhachHang.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMaKhachHangKeyReleased(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Tên Khách Hàng");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("SDT");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Mã Sản Phẩm");

        txtNgayLap.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtNgayLap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNgayLapActionPerformed(evt);
            }
        });

        txtTenNV.setEditable(false);
        txtTenNV.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Ngày Lập");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("Mã Khách Hàng");

        txtSDTNV.setEditable(false);
        txtSDTNV.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtSDTNV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSDTNVActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel18.setText("Mã Nhân Viên");

        jLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel.setText("SDT KH");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("Giới Tính");

        cBGioiTinh.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nam", "Nữ", "Khác" }));
        cBGioiTinh.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setText("Địa Chỉ");

        txtDiaChi.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtDiaChi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDiaChiActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel19.setText("Tên Sản Phẩm");

        txtThanhTien.setEditable(false);
        txtThanhTien.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtThanhTien.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtThanhTienKeyReleased(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Thành Tiền");

        jLabel20.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel20.setText("Số Lượng");

        txtMaSP.setEditable(false);
        txtMaSP.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtMaSP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMaSPKeyReleased(evt);
            }
        });

        txtTenKH.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        txtSDTKH.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        tfSoLuong.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfSoLuongKeyReleased(evt);
            }
        });

        cBMaNV.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        cBMaNV.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cBMaNV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cBMaNVActionPerformed(evt);
            }
        });

        cBTenSP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        cBTenSP.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cBTenSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cBTenSPActionPerformed(evt);
            }
        });

        txtDonGia.setEditable(false);
        txtDonGia.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtDonGia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDonGiaKeyReleased(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setText("Đơn Giá");

        javax.swing.GroupLayout jpDanhSachHangHoaLayout = new javax.swing.GroupLayout(jpDanhSachHangHoa);
        jpDanhSachHangHoa.setLayout(jpDanhSachHangHoaLayout);
        jpDanhSachHangHoaLayout.setHorizontalGroup(
            jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                        .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpDanhSachHangHoaLayout.createSequentialGroup()
                                .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cBGioiTinh, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(2, 2, 2))
                            .addComponent(txtMaKhachHang, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtTenKH, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                        .addComponent(jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSDTKH, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(21, 21, 21)
                        .addComponent(txtMaHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cBTenSP, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                        .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                                .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtTenNV)
                                    .addComponent(txtSDTNV, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cBMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpDanhSachHangHoaLayout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtThanhTien, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(jLabel6)
                                .addGap(9, 9, 9)
                                .addComponent(txtMaSP, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtNgayLap, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                                        .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tfSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtDonGia, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpDanhSachHangHoaLayout.setVerticalGroup(
            jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                        .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMaKhachHang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtTenKH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel)
                            .addComponent(txtSDTKH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel8)
                                .addComponent(txtNgayLap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel11)
                                .addComponent(txtDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7)
                                .addComponent(txtThanhTien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 25, Short.MAX_VALUE))
                    .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                        .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cBTenSP, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                                .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtMaHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(11, 11, 11)
                                .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(cBMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                                        .addGap(33, 33, 33)
                                        .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(txtTenNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel12)
                                            .addComponent(txtDonGia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(tfSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel5)
                                                .addComponent(txtSDTNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel6)
                                        .addComponent(txtMaSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                                        .addGap(70, 70, 70)
                                        .addComponent(cBGioiTinh, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        tableHoaDon.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 0, 12))); // NOI18N
        tableHoaDon.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tableHoaDon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã Hóa Đơn", "Tên Khách Hàng", "Tên Nhân Viên", "Ngày Lập", "Sản phẩm", "Số lượng", "Thành tiền"
            }
        ));
        jScrollPane1.setViewportView(tableHoaDon);

        btnXoaHD.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnXoaHD.setText("Xóa");
        btnXoaHD.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnXoaHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaHDActionPerformed(evt);
            }
        });

        btnThoat.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnThoat.setText("Thoát");
        btnThoat.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnThoat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThoatActionPerformed(evt);
            }
        });

        btnSuaHD.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSuaHD.setText("Sửa");
        btnSuaHD.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSuaHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaHDActionPerformed(evt);
            }
        });

        btnThemHD.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnThemHD.setText("Thêm");
        btnThemHD.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnThemHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemHDActionPerformed(evt);
            }
        });

        btnCTHD.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnCTHD.setText("Xem Chi Tiết");
        btnCTHD.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCTHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCTHDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnThemHD, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67)
                        .addComponent(btnXoaHD, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSuaHD, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(84, 84, 84)
                        .addComponent(btnCTHD, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(btnThoat, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpDanhSachHangHoa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 966, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpDanhSachHangHoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCTHD, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnThoat, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSuaHD, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnXoaHD, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnThemHD, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadDataToTableHoaDon() {
        try {
            Connection conn = DatabaseConnection.getConnection();
            String sql = "SELECT HOADONXUAT.MaHDX, HOADONXUAT.MaKh, HOADONXUAT.MaNv, HOADONXUAT.TongTien, HOADONXUAT.NgayLap, CHITIETHDX.SoLuong, KHACHHANG.TenKh, NHANVIEN.TenNhanVien, HANGHOA.TenHang " +
                     "FROM HOADONXUAT " +
                     "INNER JOIN CHITIETHDX ON HOADONXUAT.MaHDX = CHITIETHDX.MaHDX " +
                     "INNER JOIN KHACHHANG ON HOADONXUAT.MaKh = KHACHHANG.MaKh " +
                     "INNER JOIN NHANVIEN ON HOADONXUAT.MaNv = NHANVIEN.MaNv " +
                     "INNER JOIN HANGHOA ON CHITIETHDX.MaHang = HANGHOA.MaHang";

            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            ResultSet resultSet = preparedStatement.executeQuery();

            DefaultTableModel model = (DefaultTableModel) tableHoaDon.getModel();
            model.setRowCount(0); // Xóa tất cả các hàng trong bảng trước khi đổ dữ liệu mới

            while (resultSet.next()) {
                String maHDX = resultSet.getString("MaHDX");
                String tenKhachHang = resultSet.getString("TenKh");
                String tenNhanVien = resultSet.getString("TenNhanVien");
                String tenSanPham = resultSet.getString("tenHang");
                String tongTien = resultSet.getString("TongTien");
                String soLuong = resultSet.getString("SoLuong");
                Date ngayLap = resultSet.getDate("NgayLap");

                // Thêm dữ liệu vào mô hình của bảng
                model.addRow(new Object[]{maHDX, tenKhachHang, tenNhanVien, ngayLap, tenSanPham,soLuong, tongTien});
            }

            // Đóng kết nối cơ sở dữ liệu (nếu cần)
            // conn.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi nạp dữ liệu từ cơ sở dữ liệu: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void btnXoaHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaHDActionPerformed
        // Kiểm tra xem có hàng nào được chọn không
        int selectedRow = tableHoaDon.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hàng để xóa!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Lấy giá trị khóa chính của hàng đã chọn từ cột MaHD (hoặc khóa chính tương ứng) trong bảng hiển thị
        String maHoaDon = tableHoaDon.getValueAt(selectedRow, 0).toString(); // Giả sử cột đầu tiên là MaHD

        try {
            Connection conn = DatabaseConnection.getConnection();

            // Xóa dữ liệu liên quan trong bảng CTHD
            String sqlXoaCTHD = "DELETE FROM CHITIETHDX WHERE MaHDX = ?";
            PreparedStatement preparedStatementCTHD = conn.prepareStatement(sqlXoaCTHD);
            preparedStatementCTHD.setString(1, maHoaDon);
            preparedStatementCTHD.executeUpdate();

            // Xóa dữ liệu liên quan trong bảng HOADONXUAT
            String sqlXoaHoaDon = "DELETE FROM HOADONXUAT WHERE MaHDX = ?";
            PreparedStatement preparedStatementHoaDon = conn.prepareStatement(sqlXoaHoaDon);
            preparedStatementHoaDon.setString(1, maHoaDon);
            int rowsUpdatedHoaDon = preparedStatementHoaDon.executeUpdate();

            if (rowsUpdatedHoaDon > 0) {
                JOptionPane.showMessageDialog(this, "Xóa hóa đơn thành công!", "Thành công", JOptionPane.INFORMATION_MESSAGE);

                // Xóa hàng đã chọn từ bảng hiển thị
                DefaultTableModel model = (DefaultTableModel) tableHoaDon.getModel();
                model.removeRow(selectedRow);
            } else {
                JOptionPane.showMessageDialog(this, "Không thể xóa hóa đơn!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi xóa hóa đơn: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnXoaHDActionPerformed

    private void btnThoatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThoatActionPerformed
        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn thoát?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            // Ẩn form Main
            this.setVisible(false);

            // Tạo và hiển thị form đăng nhập
            FormMain formMain = new FormMain();
            formMain.setLocationRelativeTo(null);
            formMain.setVisible(true);
        }
    }//GEN-LAST:event_btnThoatActionPerformed

    private void btnSuaHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaHDActionPerformed
        String maHoaDon = txtMaHoaDon.getText();
        capNhatThongTinHoaDon(maHoaDon);
    }//GEN-LAST:event_btnSuaHDActionPerformed
    private void capNhatThongTinNhanVien(String maNhanVien) {
         try {
            Connection conn = DatabaseConnection.getConnection();
            conn.setAutoCommit(false); // Tắt chế độ auto-commit

            String sql = "UPDATE NHANVIEN SET MaNv = ?";
            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            preparedStatement.setString(1, maNhanVien);;
            

            conn.setAutoCommit(true); // Bật lại chế độ auto-commit sau khi xử lý giao dịch
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật thông tin Nhân viên: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void capNhatThongTinKhachHang1(String maKhachHang) {
        // Lấy thông tin mới từ các trường nhập liệu
        String tenKhachHang = txtTenKH.getText();
        String sdtKh = txtSDTKH.getText();
        String gioiTinh = cBGioiTinh.getSelectedItem().toString();
        String diaChiKh = txtDiaChi.getText();

        try {
            Connection conn = DatabaseConnection.getConnection();
            conn.setAutoCommit(false); // Tắt chế độ auto-commit

            String sql = "UPDATE KHACHHANG SET TenKh = ?, SDT = ?, GioiTinh = ?, DiaChi = ? WHERE MaKh = ?";
            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            preparedStatement.setString(1, tenKhachHang);
            preparedStatement.setString(2, sdtKh);
            preparedStatement.setString(3, gioiTinh);
            preparedStatement.setString(4, diaChiKh);
            preparedStatement.setString(5, maKhachHang);
            
            loadDataToTableHoaDon();

            conn.setAutoCommit(true); // Bật lại chế độ auto-commit sau khi xử lý giao dịch
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật thông tin khách hàng: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }  

    
    private void capNhatThongTinHoaDon(String maHoaDon) {
        String maKhachHang = txtMaKhachHang.getText();
        String maNhanVien = cBMaNV.getSelectedItem().toString();
        String ngayLapStr = txtNgayLap.getText();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); // Định dạng ngày
        java.sql.Date ngayLap = null;
        
        try {
            java.util.Date parsedDate = dateFormat.parse(ngayLapStr);
            ngayLap = new java.sql.Date(parsedDate.getTime());
        } catch (ParseException ex) {
            ex.printStackTrace();
            // Xử lý lỗi nếu có
        }
        
        // Kiểm tra xem các thông tin cần thiết đã được nhập chưa
        if (maKhachHang.isEmpty() || maNhanVien.isEmpty() || ngayLap == null) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return; // Không tiến hành cập nhật nếu thông tin còn thiếu
        }

        try {
            Connection conn = DatabaseConnection.getConnection();
            String sql = "UPDATE HOADONXUAT SET MaKh = ?, MaNv = ?, NgayLap = ? , TongTien = ? WHERE MaHDX = ?";
            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            preparedStatement.setString(1, maKhachHang);
            preparedStatement.setString(2, maNhanVien);
            preparedStatement.setDate(3, new java.sql.Date(ngayLap.getTime()));
            int thanhTien = Integer.parseInt(txtThanhTien.getText());
            preparedStatement.setInt(4, thanhTien);

            preparedStatement.setString(5, maHoaDon);

            int rowsUpdated = preparedStatement.executeUpdate();

            if (rowsUpdated > 0) {
                // Cập nhật thành công
                // Gọi các hàm cập nhật thông tin trong các bảng khác ở dưới
                capNhatThongTinNhanVien(maNhanVien);
                capNhatThongTinKhachHang1(maKhachHang);
                capNhatThongTinChiTietHoaDon(maHoaDon);
                JOptionPane.showMessageDialog(this, "Cập nhật thông tin hóa đơn thành công!", "Thành công", JOptionPane.INFORMATION_MESSAGE);
                loadDataToTableHoaDon();
            } else {
                JOptionPane.showMessageDialog(this, "Không thể cập nhật thông tin hóa đơn!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật thông tin: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    
    private void capNhatThongTinChiTietHoaDon(String maHoaDon) {
        // Lấy thông tin mới từ các trường nhập liệu
        String maHang = txtMaSP.getText();
        int soLuong = Integer.parseInt(tfSoLuong.getText());

        try {
            Connection conn = DatabaseConnection.getConnection();
            String sql = "UPDATE CHITIETHDX SET MaHang = ?, SoLuong = ? WHERE MaHDX = ?";
            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            preparedStatement.setString(1, maHang);
            preparedStatement.setInt(2, soLuong);
            preparedStatement.setString(3, maHoaDon);   // Correct index for MaHDX

            int rowsUpdated = preparedStatement.executeUpdate();

            if (rowsUpdated <= 0) {
                JOptionPane.showMessageDialog(this, "Không thể cập nhật thông tin chi tiết hóa đơn!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật thông tin chi tiết hóa đơn: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }


    
    private void btnThemHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemHDActionPerformed
                                 
        // Lấy thông tin từ các thẻ
        String maKhachHang = txtMaKhachHang.getText();
        String tenKhachHang = txtTenKH.getText();
        String sdtKh = txtSDTKH.getText();
        String gioiTinh = cBGioiTinh.getSelectedItem().toString();
        String diaChiKh = txtDiaChi.getText();

        String maHoaDon = txtMaHoaDon.getText();
        String maNhanVien = cBMaNV.getSelectedItem().toString();
        String tenNv = txtTenNV.getText();
        String maSanPham = txtMaSP.getText();
        String tenSanPham = cBTenSP.getSelectedItem().toString();
        int donGia = Integer.parseInt(txtDonGia.getText());
        int soLuong = Integer.parseInt(tfSoLuong.getText());
        int thanhTien = Integer.parseInt(txtThanhTien.getText());

        // Lấy và chuyển đổi dữ liệu ngày lập
        String ngayLapStr = txtNgayLap.getText();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); // Định dạng ngày
        java.sql.Date ngayLap = null;
        try {
            java.util.Date parsedDate = dateFormat.parse(ngayLapStr);
            ngayLap = new java.sql.Date(parsedDate.getTime());
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Định dạng ngày không hợp lệ! Vui lòng nhập ngày theo định dạng yyyy-MM-dd.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
            return; // Thoát khỏi phương thức nếu ngày không hợp lệ
        }

        // Kiểm tra xem các thông tin cần thiết đã được nhập chưa
        if (maKhachHang.isEmpty() || maNhanVien.isEmpty() || ngayLap == null) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return; // Không tiến hành cập nhật nếu thông tin còn thiếu
        }

        Connection conn = null;
        try {
            conn = DatabaseConnection.getConnection();
            conn.setAutoCommit(false); // Tắt chế độ tự động commit

            boolean khachHangDaTonTai = kiemTraTonTaiKhachHang(maKhachHang);
            if (!khachHangDaTonTai) {
                // Thêm thông tin khách hàng vào bảng KHACHHANG
                String sqlInsertKhachHang = "INSERT INTO KHACHHANG (MaKh, TenKh, SDT, GioiTinh, DiaChi) VALUES (?, ?, ?, ?, ?)";
                PreparedStatement preparedStatementKhachHang = conn.prepareStatement(sqlInsertKhachHang);
                preparedStatementKhachHang.setString(1, maKhachHang);
                preparedStatementKhachHang.setString(2, tenKhachHang);
                preparedStatementKhachHang.setString(3, sdtKh);
                preparedStatementKhachHang.setString(4, gioiTinh);
                preparedStatementKhachHang.setString(5, diaChiKh);
                preparedStatementKhachHang.executeUpdate();
            }

//             Thêm thông tin hóa đơn vào bảng HOADONXUAT
            String sqlInsertHoaDon = "INSERT INTO HOADONXUAT (MaHDX, MaKh, MaNv, NgayLap, TongTien) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement preparedStatementHoaDon = conn.prepareStatement(sqlInsertHoaDon);
            preparedStatementHoaDon.setString(1, maHoaDon);
            preparedStatementHoaDon.setString(2, maKhachHang);
            preparedStatementHoaDon.setString(3, maNhanVien);
            preparedStatementHoaDon.setDate(4, ngayLap);
            preparedStatementHoaDon.setDouble (5, thanhTien);
            preparedStatementHoaDon.executeUpdate();

//             Thêm thông tin chi tiết hóa đơn vào bảng CHITIETHOADONXUAT 
            String sqlInsertChiTietHoaDon = "INSERT INTO CHITIETHDX (MaHDX, MaHang, SoLuong) VALUES (?, ?, ?)";
            PreparedStatement preparedStatementChiTietHoaDon = conn.prepareStatement(sqlInsertChiTietHoaDon);
            preparedStatementChiTietHoaDon.setString(1, maHoaDon);
            preparedStatementChiTietHoaDon.setString(2, maSanPham);
            preparedStatementChiTietHoaDon.setInt(3, soLuong);
            preparedStatementChiTietHoaDon.executeUpdate();
            
            //  cập nhật số lượng sản phẩm
            String updateQuery = "UPDATE HANGHOA SET SoLuongKho = SoLuongKho - ? WHERE MaHang = ?";
            PreparedStatement updateStatement = conn.prepareStatement(updateQuery);
            updateStatement.setInt(1, soLuong);
            updateStatement.setString(2, maSanPham);
            int rowsUpdated = updateStatement.executeUpdate();


            // Commit dữ liệu vào cơ sở dữ liệu
            conn.commit();

            JOptionPane.showMessageDialog(this, "Thêm hóa đơn thành công!", "Thành công", JOptionPane.INFORMATION_MESSAGE);
            loadDataToTableHoaDon(); // Nạp lại dữ liệu vào bảng hóa đơn sau khi thêm thành công
            txtMaKhachHang.setText("");
            txtTenKH.setText("");
            txtSDTKH.setText("");
            cBGioiTinh.setSelectedIndex(0);
            txtDiaChi.setText("");

            cBMaNV.setSelectedIndex(0);
            txtTenNV.setText("");
            txtSDTNV.setText("");

            cBTenSP.setSelectedIndex(0);
            txtMaSP.setText("");
            tfSoLuong.setText("");
            txtThanhTien.setText("");
            txtNgayLap.setText("");
        } catch (SQLException ex) {
            try {
                if (conn != null) {
                    conn.rollback(); // Rollback nếu có lỗi xảy ra
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            JOptionPane.showMessageDialog(this, "Lỗi khi thêm hóa đơn: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (conn != null) {
                    conn.setAutoCommit(true); // Mở lại chế độ tự động commit
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnThemHDActionPerformed

    private boolean kiemTraTonTaiKhachHang(String maKhachHang) {
        boolean tonTai = false;
        try {
            Connection conn = DatabaseConnection.getConnection();
            String sql = "SELECT * FROM KHACHHANG WHERE MaKh = ?";
            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            preparedStatement.setString(1, maKhachHang);
            ResultSet resultSet = preparedStatement.executeQuery();
            tonTai = resultSet.next();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi kiểm tra mã khách hàng: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
        return tonTai;
    } 
    
    private void btnCTHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCTHDActionPerformed
        // Tạo form 
        FormCTHDX formCTHD = new FormCTHDX(); // Truyền tham số 


        // Hiển thị form
        formCTHD.setVisible(true);
    }//GEN-LAST:event_btnCTHDActionPerformed

    private void txtDiaChiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDiaChiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDiaChiActionPerformed

    private void txtNgayLapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNgayLapActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNgayLapActionPerformed

    private void txtMaHoaDonFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMaHoaDonFocusLost
        String maHD = txtMaHoaDon.getText().trim(); // Lấy mã hóa đơn từ JTextField và loại bỏ khoảng trắng thừa

        if (!maHD.isEmpty()) {
            try {
                Connection conn = DatabaseConnection.getConnection();

                String sql = "SELECT HOADONXUAT.MaHDX, HOADONXUAT.MaKh, HOADONXUAT.MaNv, HOADONXUAT.NgayLap, HOADONXUAT.TongTien, " +
                             "KHACHHANG.TenKh AS TenKhachHang, KHACHHANG.SDT AS SDTKhachHang, KHACHHANG.GioiTinh, KHACHHANG.DiaChi, " +
                             "NHANVIEN.TenNhanVien AS TenNhanVien, NHANVIEN.SDT AS SDTNhanVien, NHANVIEN.GioiTinh, NHANVIEN.DiaChi, " +
                             "HANGHOA.TenHang AS TenSanPham, CHITIETHDX.MaHang, HANGHOA.DonGia, CHITIETHDX.SoLuong " +
                             "FROM HOADONXUAT " +
                             "INNER JOIN KHACHHANG ON HOADONXUAT.MaKh = KHACHHANG.MaKh " +
                             "INNER JOIN NHANVIEN ON HOADONXUAT.MaNv = NHANVIEN.MaNv " +
                             "INNER JOIN CHITIETHDX ON HOADONXUAT.MaHDX = CHITIETHDX.MaHDX " +
                             "INNER JOIN HANGHOA ON CHITIETHDX.MaHang = HANGHOA.MaHang " +
                             "WHERE HOADONXUAT.MaHDX = ?";
                PreparedStatement preparedStatement = conn.prepareStatement(sql);
                preparedStatement.setString(1, maHD);
                ResultSet resultSet = preparedStatement.executeQuery();

                if (resultSet.next()) {
                    // Đổ dữ liệu từ ResultSet vào các JTextField và JComboBox tương ứng
                    txtMaKhachHang.setText(resultSet.getString("MaKh"));
                    txtTenKH.setText(resultSet.getString("TenKhachHang"));
                    txtSDTKH.setText(resultSet.getString("SDTKhachHang"));
                    cBGioiTinh.setSelectedItem(resultSet.getString("GioiTinh"));
                    txtDiaChi.setText(resultSet.getString("DiaChi"));

                    cBMaNV.setSelectedItem(resultSet.getString("MaNv"));
                    txtTenNV.setText(resultSet.getString("TenNhanVien"));
                    txtSDTNV.setText(resultSet.getString("SDTNhanVien"));

                    cBTenSP.setSelectedItem(resultSet.getString("TenSanPham"));
                    txtMaSP.setText(resultSet.getString("MaHang"));
                    txtDonGia.setText(resultSet.getString("DonGia"));
                    tfSoLuong.setText(resultSet.getString("SoLuong"));
                    txtThanhTien.setText(resultSet.getString("TongTien"));

                    // Format và hiển thị ngày lập
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                    Date ngayLap = resultSet.getDate("NgayLap");
                    String ngayLapStr = dateFormat.format(ngayLap);
                    txtNgayLap.setText(ngayLapStr);

                    // Reset biến flag
                    showError = false;
                } else {
                    // Không tìm thấy mã hóa đơn
                    if (!showError) { // Kiểm tra biến flag trước khi hiển thị thông báo
                        JOptionPane.showMessageDialog(this, "Không tìm thấy mã hóa đơn này!", "Không tìm thấy", JOptionPane.ERROR_MESSAGE);
                        showError = true; // Đánh dấu đã hiển thị thông báo
                    }

                    // Xóa dữ liệu từ các JTextField và JComboBox tương ứng
                    txtMaKhachHang.setText("");
                    txtTenKH.setText("");
                    txtSDTKH.setText("");
                    cBGioiTinh.setSelectedIndex(0);
                    txtDiaChi.setText("");

                    cBMaNV.setSelectedIndex(0);
                    txtTenNV.setText("");
                    txtSDTNV.setText("");

                    cBTenSP.setSelectedIndex(0);
                    txtMaSP.setText("");
                    tfSoLuong.setText("");
                    txtThanhTien.setText("");
                    txtNgayLap.setText("");
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Lỗi khi tìm kiếm mã hóa đơn: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_txtMaHoaDonFocusLost

    private void txtSDTNVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSDTNVActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSDTNVActionPerformed
    
    private void loadMaNhanVienToComboBox() {
        try {
            Connection conn = DatabaseConnection.getConnection();
            String sql = "SELECT MaNv FROM NHANVIEN";
            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                String maNhanVien = resultSet.getString("MaNv");
                cBMaNV.addItem(maNhanVien);
            }

            // Đóng kết nối cơ sở dữ liệu (nếu cần)
            // conn.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi nạp dữ liệu mã nhân viên: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void cBMaNVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cBMaNVActionPerformed
        String selectedMaNhanVien = cBMaNV.getSelectedItem().toString();
        if (!selectedMaNhanVien.isEmpty()) {
            try {
                Connection conn = DatabaseConnection.getConnection();
                String sql = "SELECT TenNhanVien, SDT FROM NHANVIEN WHERE MaNv = ?";
                PreparedStatement preparedStatement = conn.prepareStatement(sql);
                preparedStatement.setString(1, selectedMaNhanVien);
                ResultSet resultSet = preparedStatement.executeQuery();

                if (resultSet.next()) {
                    String tenNhanVien = resultSet.getString("TenNhanVien");
                    String sdtNhanVien = resultSet.getString("SDT");
                    txtTenNV.setText(tenNhanVien);
                    txtSDTNV.setText(sdtNhanVien);
                } else {
                    // Xử lý trường hợp không tìm thấy thông tin nhân viên
                    txtTenNV.setText("");
                    txtSDTNV.setText("");
                }

                // Đóng kết nối cơ sở dữ liệu (nếu cần)
                // conn.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Lỗi khi tìm kiếm thông tin nhân viên: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_cBMaNVActionPerformed

    private void loadTenSPToComboBox() {
        try {
            Connection conn = DatabaseConnection.getConnection();
            String sql = "SELECT TenHang FROM HANGHOA";
            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                String tenSP = resultSet.getString("TenHang");
                cBTenSP.addItem(tenSP);
            }

            // Đóng kết nối cơ sở dữ liệu (nếu cần)
            // conn.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi nạp dữ liệu mã nhân viên: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void cBTenSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cBTenSPActionPerformed
        String selectedTenSP = cBTenSP.getSelectedItem().toString();
        if (!selectedTenSP.isEmpty()) {
            try {
                Connection conn = DatabaseConnection.getConnection();
                String sql = "SELECT MaHang, DonGia FROM HANGHOA WHERE TenHang = ?";
                PreparedStatement preparedStatement = conn.prepareStatement(sql);
                preparedStatement.setString(1, selectedTenSP);
                ResultSet resultSet = preparedStatement.executeQuery();

                if (resultSet.next()) {
                    String maSanPham = resultSet.getString("MaHang");
                    String donGia = resultSet.getString("DonGia");
                    txtMaSP.setText(maSanPham);
                    txtDonGia.setText(donGia);
                } else {
                    // Xử lý trường hợp không tìm thấy thông tin nhân viên
                    txtMaSP.setText("");
                    txtDonGia.setText("");
                }

                // Đóng kết nối cơ sở dữ liệu (nếu cần)
                // conn.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Lỗi khi tìm kiếm thông tin nhân viên: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_cBTenSPActionPerformed

    private void txtMaKhachHangKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMaKhachHangKeyReleased
        String maKhachHang = txtMaKhachHang.getText();
        if (!maKhachHang.isEmpty()) {
            // Kiểm tra xem mã khách hàng đã tồn tại trong cơ sở dữ liệu chưa
            if (kiemTraMaKhachHangTonTai(maKhachHang)) {
                // Mã khách hàng tồn tại, đổ dữ liệu từ cơ sở dữ liệu
                hienThiThongTinKhachHang(maKhachHang);
            } else {
                // Mã khách hàng không tồn tại, cho phép người dùng nhập các trường còn lại
                resetThongTinKhachHang();
            }
        }
    }//GEN-LAST:event_txtMaKhachHangKeyReleased

    private void txtThanhTienKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtThanhTienKeyReleased

    }//GEN-LAST:event_txtThanhTienKeyReleased

    private void tfSoLuongKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfSoLuongKeyReleased
        tinhTien();
    }//GEN-LAST:event_tfSoLuongKeyReleased

    private void txtMaSPKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMaSPKeyReleased

    }//GEN-LAST:event_txtMaSPKeyReleased

    private void txtDonGiaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDonGiaKeyReleased
        tinhTien();
    }//GEN-LAST:event_txtDonGiaKeyReleased

    private void txtMaKhachHangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaKhachHangActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaKhachHangActionPerformed
    
    private void tinhTien() {
    try {
        // Lấy giá trị từ txtDonGia và tfSoLuong
        int donGia = Integer.parseInt(txtDonGia.getText());
        int soLuong = Integer.parseInt(tfSoLuong.getText());

        // Tính toán thành tiền
        int thanhTien = donGia * soLuong;

        // Hiển thị kết quả trong txtThanhTien
        txtThanhTien.setText(String.valueOf(thanhTien));
    } catch (NumberFormatException ex) {
        // Xử lý lỗi nếu người dùng nhập không hợp lệ (không phải số)
        txtThanhTien.setText("0"); // Có thể hiển thị một giá trị mặc định khác
    }
}
    
    // Kiểm tra xem mã khách hàng đã tồn tại trong cơ sở dữ liệu chưa
    private boolean kiemTraMaKhachHangTonTai(String maKhachHang) {
        // Thực hiện truy vấn kiểm tra mã khách hàng tồn tại ở đây
        // Trả về true nếu mã tồn tại, false nếu không tồn tại
        // Ví dụ:
        try {
            Connection conn = DatabaseConnection.getConnection();
            String sql = "SELECT * FROM KHACHHANG WHERE MaKh = ?";
            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            preparedStatement.setString(1, maKhachHang);
            ResultSet resultSet = preparedStatement.executeQuery();

            return resultSet.next(); // Trả về true nếu tồn tại, false nếu không tồn tại
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi kiểm tra mã khách hàng: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            return false; // Xảy ra lỗi, trả về false để không thực hiện hàm khác
        }
    }

    // Đổ dữ liệu khách hàng từ cơ sở dữ liệu
    private void hienThiThongTinKhachHang(String maKhachHang) {
        try {
            Connection conn = DatabaseConnection.getConnection();
            String sql = "SELECT * FROM KHACHHANG WHERE MaKh = ?";
            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            preparedStatement.setString(1, maKhachHang);
            ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                // Lấy thông tin từ ResultSet và hiển thị trên các trường tương ứng
                String tenKhachHang = resultSet.getString("TenKh");
                String sdtKhachHang = resultSet.getString("SDT");
                String gioiTinhKhachHang = resultSet.getString("GioiTinh");
                String diaChiKhachHang = resultSet.getString("DiaChi");

                txtTenKH.setText(tenKhachHang);
                txtSDTKH.setText(sdtKhachHang);
                cBGioiTinh.setSelectedItem(gioiTinhKhachHang);
                txtDiaChi.setText(diaChiKhachHang);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi hiển thị thông tin khách hàng: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Xóa thông tin khách hàng trên các trường
    private void resetThongTinKhachHang() {
        txtTenKH.setText("");
        txtSDTKH.setText("");
        cBGioiTinh.setSelectedItem("");
        txtDiaChi.setText("");
    }

    
    private boolean showError = false; // Thêm biến flag
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormHoaDonXuat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormHoaDonXuat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormHoaDonXuat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormHoaDonXuat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormHoaDonXuat().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cBGioiTinh;
    private javax.swing.JComboBox<String> cBMaNV;
    private javax.swing.JComboBox<String> cBTenSP;
    private javax.swing.JTable tableHoaDon;
    private javax.swing.JTextField tfSoLuong;
    private javax.swing.JTextField txtDiaChi;
    private javax.swing.JTextField txtDonGia;
    private javax.swing.JTextField txtMaHoaDon;
    private javax.swing.JTextField txtMaKhachHang;
    private javax.swing.JTextField txtMaSP;
    private javax.swing.JTextField txtNgayLap;
    private javax.swing.JTextField txtSDTKH;
    private javax.swing.JTextField txtSDTNV;
    private javax.swing.JTextField txtTenKH;
    private javax.swing.JTextField txtTenNV;
    private javax.swing.JTextField txtThanhTien;
    // End of variables declaration//GEN-END:variables
}
