/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.qlbh.ql;

import ConnectDtb.DatabaseConnection;
import com.qlbh.main.FormMain;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author MINH TUNG
 */
public class FormCTHDN extends javax.swing.JFrame {

    /**
     * Creates new form FormCTHD
     */
    public FormCTHDN() {
        initComponents();
        setLocationRelativeTo(null);
        loadtableCTHD1();
        loadtableCTHD2();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        tableCTHD1 = new javax.swing.JTable();
        javax.swing.JScrollPane jScrollPane2 = new javax.swing.JScrollPane();
        tableCTHD2 = new javax.swing.JTable();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel12 = new javax.swing.JLabel();
        txtMaKhachHang = new javax.swing.JTextField();
        javax.swing.JButton btnThoat = new javax.swing.JButton();
        javax.swing.JButton btnTimKiem = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("WinMart - Chi Tiết Hóa Đơn");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tableCTHD1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 0, 12))); // NOI18N
        tableCTHD1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tableCTHD1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã Nhà Cung Cấp", "Tên Nhà Cung Cấp", "SDT", "Email", "Địa Chỉ", "Mã Nhân Viên", "Tên Nhân Viên", "SDT NV"
            }
        ));
        jScrollPane1.setViewportView(tableCTHD1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, 938, 94));

        tableCTHD2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 0, 12))); // NOI18N
        tableCTHD2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tableCTHD2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã Hóa Đơn", "Mã Sản Phẩm", "Tên Sản Phẩm", "Ngày Lập Hóa Đơn", "Đơn Giá", "Số Lượng", "Thành Tiền"
            }
        ));
        jScrollPane2.setViewportView(tableCTHD2);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 320, 938, 172));

        jLabel1.setBackground(new java.awt.Color(255, 51, 51));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Chi Tiết Hóa Đơn");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 1010, 37));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setText("Nhập Mã Nhà CC");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 60, -1, 30));

        txtMaKhachHang.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        getContentPane().add(txtMaKhachHang, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 60, 200, 30));

        btnThoat.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnThoat.setText("Thoát");
        btnThoat.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnThoat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThoatActionPerformed(evt);
            }
        });
        getContentPane().add(btnThoat, new org.netbeans.lib.awtextra.AbsoluteConstraints(714, 55, 93, 35));

        btnTimKiem.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnTimKiem.setText("OK");
        btnTimKiem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });
        getContentPane().add(btnTimKiem, new org.netbeans.lib.awtextra.AbsoluteConstraints(605, 55, 93, 35));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/628c054a618e1928c739eb83_After_winmart-100.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 30, 630, 440));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadtableCTHD1() {
    try {
        Connection conn = DatabaseConnection.getConnection(); // Lấy kết nối đến cơ sở dữ liệu
        String sql = "SELECT HOADONNHAP.MaHDN, HOADONNHAP.MaNCC, HOADONNHAP.MaNv, HOADONNHAP.NgayLap, " +
                     "NHACUNGCAP.TenNCC, NHACUNGCAP.DienThoai AS DienThoai, NHACUNGCAP.Email AS Email, NHACUNGCAP.DiaChi AS DiaChiNCC, " +
                     "NHANVIEN.TenNhanVien, NHANVIEN.GioiTinh AS EmailNV, NHANVIEN.DiaChi AS DiaChiNV, NHANVIEN.SDT AS SDTNV, " +
                     "CHITIETHDN.MaHang, HANGHOA.TenHang AS TenSanPham, HANGHOA.DonGia, CHITIETHDN.SoLuong, HOADONNHAP.TongTien " +
                     "FROM HOADONNHAP " +
                     "INNER JOIN NHACUNGCAP ON HOADONNHAP.MaNCC = NHACUNGCAP.MaNCC " +
                     "INNER JOIN NHANVIEN ON HOADONNHAP.MaNv = NHANVIEN.MaNv " +
                     "INNER JOIN CHITIETHDN ON HOADONNHAP.MaHDN = CHITIETHDN.MaHDN " +
                     "INNER JOIN HANGHOA ON CHITIETHDN.MaHang = HANGHOA.MaHang";

        PreparedStatement preparedStatement = conn.prepareStatement(sql); // Chuẩn bị câu lệnh SQL
        ResultSet resultSet = preparedStatement.executeQuery(); // Thực thi truy vấn và lấy kết quả

        DefaultTableModel model = (DefaultTableModel) tableCTHD1.getModel();
        model.setRowCount(0); // Xóa tất cả các hàng trong bảng trước khi đổ dữ liệu mới

        while (resultSet.next()) {
            String maNCC = resultSet.getString("MaNCC");
            String tenNCC = resultSet.getString("TenNCC");
            String sdtKhachHang = resultSet.getString("DienThoai");
            String emailNCC = resultSet.getString("Email");
            String diaChiNCC = resultSet.getString("DiaChiNCC");
            String maNhanVien = resultSet.getString("MaNv");
            String tenNhanVien = resultSet.getString("TenNhanVien");
            String sdtNhanVien = resultSet.getString("SDTNV");

            // Thêm dữ liệu vào mô hình của bảng
            model.addRow(new Object[]{maNCC, tenNCC, sdtKhachHang, emailNCC, diaChiNCC, maNhanVien, tenNhanVien, sdtNhanVien});
        }

        // Đóng kết nối cơ sở dữ liệu (nếu cần)
        // conn.close(); // Đóng kết nối có thể được xử lý ở nơi khác tùy thuộc vào cách quản lý kết nối trong ứng dụng của bạn

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Lỗi khi nạp dữ liệu từ cơ sở dữ liệu: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
    }
}

private void loadtableCTHD2() {
    try {
        Connection conn = DatabaseConnection.getConnection(); // Lấy kết nối đến cơ sở dữ liệu
        String sql = "SELECT HOADONNHAP.MaHDN AS MaHD, CHITIETHDN.MaHang, HANGHOA.TenHang AS TenSanPham, HOADONNHAP.NgayLap, " +
                     "HANGHOA.DonGia, CHITIETHDN.SoLuong, HOADONNHAP.TongTien " +
                     "FROM HOADONNHAP " +
                     "INNER JOIN CHITIETHDN ON HOADONNHAP.MaHDN = CHITIETHDN.MaHDN " +
                     "INNER JOIN HANGHOA ON CHITIETHDN.MaHang = HANGHOA.MaHang";

        PreparedStatement preparedStatement = conn.prepareStatement(sql); // Chuẩn bị câu lệnh SQL
        ResultSet resultSet = preparedStatement.executeQuery(); // Thực thi truy vấn và lấy kết quả

        DefaultTableModel model = (DefaultTableModel) tableCTHD2.getModel();
        model.setRowCount(0); // Xóa tất cả các hàng trong bảng trước khi đổ dữ liệu mới

        while (resultSet.next()) {
            String maHD = resultSet.getString("MaHD");
            String maSanPham = resultSet.getString("MaHang");
            String tenSanPham = resultSet.getString("TenSanPham");
            Date ngayLap = resultSet.getDate("NgayLap");
            String donGia = resultSet.getString("DonGia");
            String soLuong = resultSet.getString("SoLuong");
            String thanhTien = resultSet.getString("TongTien");

            // Thêm dữ liệu vào mô hình của bảng
            model.addRow(new Object[]{maHD, maSanPham, tenSanPham, ngayLap, donGia, soLuong, thanhTien});
        }

        // Đóng kết nối cơ sở dữ liệu (nếu cần)
        // conn.close(); // Đóng kết nối có thể được xử lý ở nơi khác tùy thuộc vào cách quản lý kết nối trong ứng dụng của bạn

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Lỗi khi nạp dữ liệu từ cơ sở dữ liệu: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
    }
}
    
    private void btnThoatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThoatActionPerformed
        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn thoát?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            // Ẩn form 
            this.setVisible(false);
        }
    }//GEN-LAST:event_btnThoatActionPerformed

    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed
        String maNCC = txtMaKhachHang.getText();

        // Xóa toàn bộ dữ liệu trong hai bảng
        clearTable(tableCTHD1);
        clearTable(tableCTHD2);

        // Gọi phương thức để tải lại dữ liệu dựa trên Mã Khách Hàng
        loadDataToTableCTHD1(maNCC);
        loadDataToTableCTHD2(maNCC);
    }//GEN-LAST:event_btnTimKiemActionPerformed

    // Phương thức để xóa toàn bộ dữ liệu trong một bảng
private void clearTable(JTable table) {
    DefaultTableModel model = (DefaultTableModel) table.getModel();
    model.setRowCount(0);
}

// Phương thức để tải lại dữ liệu vào bảng tableCTHD1 dựa trên Mã Khách Hàng
private void loadDataToTableCTHD1(String maNCC) {
    try {
        Connection conn = DatabaseConnection.getConnection(); // Lấy kết nối đến cơ sở dữ liệu
        String sql = "SELECT HOADONNHAP.MaHDN, HOADONNHAP.MaNCC, HOADONNHAP.MaNv, HOADONNHAP.NgayLap, " +
                "NHACUNGCAP.TenNCC, NHACUNGCAP.DienThoai AS DienThoai, NHACUNGCAP.Email AS Email, NHACUNGCAP.DiaChi AS DiaChiNCC, "+
                "NHANVIEN.TenNhanVien, NHANVIEN.GioiTinh AS EmailNV, NHANVIEN.DiaChi AS DiaChiNV, NHANVIEN.SDT AS SDTNV, " +
                "CHITIETHDN.MaHang, HANGHOA.TenHang AS TenSanPham, HANGHOA.DonGia, CHITIETHDN.SoLuong, HOADONNHAP.TongTien " +
                "FROM HOADONNHAP " +
                "INNER JOIN CHITIETHDN ON HOADONNHAP.MaHDN = CHITIETHDN.MaHDN " +
                "INNER JOIN HANGHOA ON CHITIETHDN.MaHang = HANGHOA.MaHang " +
                "INNER JOIN HOADONNHAP ON HOADONNHAP.MaHDN = HOADONNHAP.MaHDN " +
                "INNER JOIN NHACUNGCAP ON HOADONNHAP.MaNCC = NHACUNGCAP.MaNCC " +
                "INNER JOIN NHANVIEN ON HOADONNHAP.MaNv = NHANVIEN.MaNv " +
                "WHERE NHACUNGCAP.MaNCC = ?";
        
        PreparedStatement preparedStatement = conn.prepareStatement(sql);
        preparedStatement.setString(1, maNCC); // Thiết lập tham số cho câu lệnh SQL
        
        ResultSet resultSet = preparedStatement.executeQuery(); // Thực thi truy vấn và lấy kết quả
        
        DefaultTableModel model = (DefaultTableModel) tableCTHD1.getModel(); // Lấy mô hình của bảng tableCTHD1

        // Xóa tất cả các hàng hiện có trong mô hình bảng trước khi thêm dữ liệu mới
        model.setRowCount(0);

        // Duyệt qua kết quả từ ResultSet và thêm từng dòng vào mô hình của bảng
        while (resultSet.next()) {
            String maKh = resultSet.getString("MaNCC");
            String tenKh = resultSet.getString("TenNCC");
            String sdtKh = resultSet.getString("DienThoai");
            String gioiTinhKh = resultSet.getString("Email");
            String diaChiKh = resultSet.getString("DiaChiNCC");
            String maNv = resultSet.getString("MaNv");
            String tenNv = resultSet.getString("TenNhanVien");
            String sdtNv = resultSet.getString("SDTNV");

            // Thêm dữ liệu vào mô hình của bảng tableCTHD1
            model.addRow(new Object[]{maKh, tenKh, sdtKh, gioiTinhKh, diaChiKh, maNv, tenNv, sdtNv});
        }

        // Đóng kết nối cơ sở dữ liệu (nếu cần)
        // conn.close();

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Lỗi khi nạp dữ liệu từ cơ sở dữ liệu: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
    }
}

// Phương thức để tải lại dữ liệu vào bảng tableCTHD2 dựa trên Mã Khách Hàng
private void loadDataToTableCTHD2(String maNCC) {
    try {
        Connection conn = DatabaseConnection.getConnection(); // Lấy kết nối đến cơ sở dữ liệu
        String sql = "SELECT HOADONNHAP.MaHDN AS MaHD, CHITIETHDN.MaHang, HANGHOA.TenHang AS TenSanPham, HOADONNHAP.NgayLap, " +
            "HANGHOA.DonGia, CHITIETHDN.SoLuong, HOADONNHAP.TongTien " +
            "FROM HOADONNHAP " +
            "INNER JOIN CHITIETHDN ON HOADONNHAP.MaHDN = CHITIETHDN.MaHDN " +
            "INNER JOIN HANGHOA ON CHITIETHDN.MaHang = HANGHOA.MaHang " +
            "INNER JOIN NHACUNGCAP ON HOADONNHAP.MaNCC = NHACUNGCAP.MaNCC " +
            "INNER JOIN NHANVIEN ON HOADONNHAP.MaNv = NHANVIEN.MaNv " +
            "WHERE NHACUNGCAP.MaNCC = ?";

        
        PreparedStatement preparedStatement = conn.prepareStatement(sql);
        preparedStatement.setString(1, maNCC); // Thiết lập tham số cho câu lệnh SQL
        
        ResultSet resultSet = preparedStatement.executeQuery(); // Thực thi truy vấn và lấy kết quả
        
        DefaultTableModel model = (DefaultTableModel) tableCTHD2.getModel(); // Lấy mô hình của bảng tableCTHD2

        // Xóa tất cả các hàng hiện có trong mô hình bảng trước khi thêm dữ liệu mới
        model.setRowCount(0);

        // Duyệt qua kết quả từ ResultSet và thêm từng dòng vào mô hình của bảng
        while (resultSet.next()) {
            String maHD = resultSet.getString("MaHD");
            String maSanPham = resultSet.getString("MaHang");
            String tenSanPham = resultSet.getString("TenSanPham");
            Date ngayLap = resultSet.getDate("NgayLap");
            String donGia = resultSet.getString("DonGia");
            String soLuong = resultSet.getString("SoLuong");
            String thanhTien = resultSet.getString("TongTien");

            // Thêm dữ liệu vào mô hình của bảng tableCTHD2
            model.addRow(new Object[]{maHD, maSanPham, tenSanPham, ngayLap, donGia, soLuong, thanhTien});
        }

        // Đóng kết nối cơ sở dữ liệu (nếu cần)
        // conn.close();

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Lỗi khi nạp dữ liệu từ cơ sở dữ liệu: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
    }
}

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormCTHDN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormCTHDN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormCTHDN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormCTHDN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormCTHDN().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTable tableCTHD1;
    private javax.swing.JTable tableCTHD2;
    private javax.swing.JTextField txtMaKhachHang;
    // End of variables declaration//GEN-END:variables
}
