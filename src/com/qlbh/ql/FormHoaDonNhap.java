/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.qlbh.ql;
import java.util.Random;
import ConnectDtb.DatabaseConnection;
import com.qlbh.main.FormMain;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
/**
 *
 * @author MINH TUNG
 */
public class FormHoaDonNhap extends javax.swing.JFrame {

    /**
     * Creates new form FormHoaDon
     */
    public FormHoaDonNhap() {
        initComponents();
        loadDataToTableHoaDon();
        loadMaNhanVienToComboBox();
        loadTenSPToComboBox();
        setLocationRelativeTo(null);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        javax.swing.JPanel jpDanhSachHangHoa = new javax.swing.JPanel();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        txtMaHoaDon = new javax.swing.JTextField();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        txtMaNCC = new javax.swing.JTextField();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel6 = new javax.swing.JLabel();
        txtNgayLap = new javax.swing.JTextField();
        txtTenNV = new javax.swing.JTextField();
        javax.swing.JLabel jLabel8 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel9 = new javax.swing.JLabel();
        txtSDTNV = new javax.swing.JTextField();
        javax.swing.JLabel jLabel18 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel = new javax.swing.JLabel();
        javax.swing.JLabel jLabel10 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel11 = new javax.swing.JLabel();
        txtDiaChiNCC = new javax.swing.JTextField();
        javax.swing.JLabel jLabel19 = new javax.swing.JLabel();
        txtThanhTien = new javax.swing.JTextField();
        javax.swing.JLabel jLabel7 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel20 = new javax.swing.JLabel();
        txtMaSP = new javax.swing.JTextField();
        txtTenNCC = new javax.swing.JTextField();
        txtSDTNCC = new javax.swing.JTextField();
        tfSoLuong = new javax.swing.JTextField();
        cBMaNV = new javax.swing.JComboBox<>();
        cBLoaiSP = new javax.swing.JComboBox<>();
        txtTenSP = new javax.swing.JTextField();
        javax.swing.JLabel jLabel12 = new javax.swing.JLabel();
        txtEmailNCC = new javax.swing.JTextField();
        txtDonGia = new javax.swing.JTextField();
        javax.swing.JLabel jLabel13 = new javax.swing.JLabel();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        tableHoaDon = new javax.swing.JTable();
        javax.swing.JButton btnXoaHD = new javax.swing.JButton();
        javax.swing.JButton btnThoat = new javax.swing.JButton();
        javax.swing.JButton btnSuaHD = new javax.swing.JButton();
        javax.swing.JButton btnThemHD = new javax.swing.JButton();
        javax.swing.JButton btnCTHD = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Winmart- Quản  lý hóa đơn");

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Hóa Đơn Nhập Hàng");

        jpDanhSachHangHoa.setBackground(new java.awt.Color(153, 255, 255));
        jpDanhSachHangHoa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh Sách Hóa Đơn", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 16))); // NOI18N
        jpDanhSachHangHoa.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Mã Hóa Đơn");

        txtMaHoaDon.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtMaHoaDon.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMaHoaDonFocusLost(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Tên Nhân Viên");

        txtMaNCC.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtMaNCC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaNCCActionPerformed(evt);
            }
        });
        txtMaNCC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMaNCCKeyReleased(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Tên Nhà Cung Cấp");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("SDT");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Mã Sản Phẩm");

        txtNgayLap.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtNgayLap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNgayLapActionPerformed(evt);
            }
        });

        txtTenNV.setEditable(false);
        txtTenNV.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Ngày Lập");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("Mã Nhà Cung Cấp");

        txtSDTNV.setEditable(false);
        txtSDTNV.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtSDTNV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSDTNVActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel18.setText("Mã Nhân Viên");

        jLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel.setText("SDT NCC");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("Email");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setText("Địa Chỉ");

        txtDiaChiNCC.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtDiaChiNCC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDiaChiNCCActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel19.setText("Tên Sản Phẩm");

        txtThanhTien.setEditable(false);
        txtThanhTien.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtThanhTien.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtThanhTienKeyReleased(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Thành Tiền");

        jLabel20.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel20.setText("Số Lượng");

        txtMaSP.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtMaSP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMaSPFocusLost(evt);
            }
        });
        txtMaSP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMaSPKeyReleased(evt);
            }
        });

        txtTenNCC.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        txtSDTNCC.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        tfSoLuong.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfSoLuongKeyReleased(evt);
            }
        });

        cBMaNV.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        cBMaNV.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cBMaNV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cBMaNVActionPerformed(evt);
            }
        });

        cBLoaiSP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        cBLoaiSP.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cBLoaiSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cBLoaiSPActionPerformed(evt);
            }
        });

        txtTenSP.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtTenSP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTenSPKeyReleased(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setText("Đơn Giá");

        txtEmailNCC.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        txtDonGia.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtDonGia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDonGiaKeyReleased(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel13.setText("Loại sản phẩm");

        javax.swing.GroupLayout jpDanhSachHangHoaLayout = new javax.swing.GroupLayout(jpDanhSachHangHoa);
        jpDanhSachHangHoa.setLayout(jpDanhSachHangHoaLayout);
        jpDanhSachHangHoaLayout.setHorizontalGroup(
            jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addComponent(txtTenNCC, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                        .addComponent(jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSDTNCC, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpDanhSachHangHoaLayout.createSequentialGroup()
                        .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpDanhSachHangHoaLayout.createSequentialGroup()
                                .addComponent(txtDiaChiNCC, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2))
                            .addComponent(txtMaNCC, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmailNCC, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtMaHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                                .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtSDTNV)
                                    .addComponent(txtTenNV)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpDanhSachHangHoaLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(txtThanhTien, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cBMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(13, 13, 13)))
                        .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpDanhSachHangHoaLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(txtMaSP, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpDanhSachHangHoaLayout.createSequentialGroup()
                                .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDonGia, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpDanhSachHangHoaLayout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cBLoaiSP, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtTenSP, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                        .addGap(413, 413, 413)
                        .addComponent(txtNgayLap, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jpDanhSachHangHoaLayout.setVerticalGroup(
            jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtMaHoaDon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cBMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtMaSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)))
                .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                        .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMaNCC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTenSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtTenNCC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)
                            .addComponent(cBLoaiSP, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTenNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel)
                            .addComponent(txtSDTNCC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(txtEmailNCC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)))
                    .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                        .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12)
                                    .addComponent(txtSDTNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)))
                            .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(txtDonGia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtThanhTien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                        .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(jpDanhSachHangHoaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(txtDiaChiNCC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel8)))
                        .addGap(0, 43, Short.MAX_VALUE))
                    .addGroup(jpDanhSachHangHoaLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNgayLap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        tableHoaDon.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 0, 12))); // NOI18N
        tableHoaDon.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tableHoaDon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã Hóa Đơn", "Tên Nhà Cung Cấp", "Tên Nhân Viên", "Ngày Lập", "Sản phẩm", "Số lượng", "Thành tiền"
            }
        ));
        jScrollPane1.setViewportView(tableHoaDon);

        btnXoaHD.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnXoaHD.setText("Xóa");
        btnXoaHD.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnXoaHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaHDActionPerformed(evt);
            }
        });

        btnThoat.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnThoat.setText("Thoát");
        btnThoat.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnThoat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThoatActionPerformed(evt);
            }
        });

        btnSuaHD.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSuaHD.setText("Sửa");
        btnSuaHD.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSuaHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaHDActionPerformed(evt);
            }
        });

        btnThemHD.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnThemHD.setText("Thêm");
        btnThemHD.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnThemHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemHDActionPerformed(evt);
            }
        });

        btnCTHD.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnCTHD.setText("Xem Chi Tiết");
        btnCTHD.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCTHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCTHDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnThemHD, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(67, 67, 67)
                                .addComponent(btnXoaHD, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                                .addComponent(btnSuaHD, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(84, 84, 84)
                                .addComponent(btnCTHD, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(btnThoat, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 966, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jpDanhSachHangHoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpDanhSachHangHoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCTHD, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnThoat, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSuaHD, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnXoaHD, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnThemHD, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadDataToTableHoaDon() {
        try {
            Connection conn = DatabaseConnection.getConnection();
            String sql = "SELECT HOADONNHAP.MaHDN, HOADONNHAP.MaNCC, HOADONNHAP.MaNv, HOADONNHAP.TongTien, HOADONNHAP.NgayLap, CHITIETHDN.SoLuong,CHITIETHDN.DonGia, NHACUNGCAP.TenNCC, NHANVIEN.TenNhanVien, HANGHOA.TenHang " +
                     "FROM HOADONNHAP " +
                     "INNER JOIN CHITIETHDN ON HOADONNHAP.MaHDN = CHITIETHDN.MaHDN " +
                     "INNER JOIN NHACUNGCAP ON HOADONNHAP.MaNCC = NHACUNGCAP.MaNCC " +
                     "INNER JOIN NHANVIEN ON HOADONNHAP.MaNv = NHANVIEN.MaNv " +
                     "INNER JOIN HANGHOA ON CHITIETHDN.MaHang = HANGHOA.MaHang";

            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            ResultSet resultSet = preparedStatement.executeQuery();

            DefaultTableModel model = (DefaultTableModel) tableHoaDon.getModel();
            model.setRowCount(0); // Xóa tất cả các hàng trong bảng trước khi đổ dữ liệu mới

            while (resultSet.next()) {
                String maHDX = resultSet.getString("MaHDN");
                String TenNCC = resultSet.getString("TenNCC");
                String tenNhanVien = resultSet.getString("TenNhanVien");
                String tenSanPham = resultSet.getString("tenHang");
                String tongTien = resultSet.getString("TongTien");
                String soLuong = resultSet.getString("SoLuong");
                Date ngayLap = resultSet.getDate("NgayLap");

                // Thêm dữ liệu vào mô hình của bảng
                model.addRow(new Object[]{maHDX, TenNCC, tenNhanVien, ngayLap, tenSanPham,soLuong, tongTien});
            }

            // Đóng kết nối cơ sở dữ liệu (nếu cần)
            // conn.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi nạp dữ liệu từ cơ sở dữ liệu: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void btnXoaHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaHDActionPerformed
        // Kiểm tra xem có hàng nào được chọn không
        int selectedRow = tableHoaDon.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hàng để xóa!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Lấy giá trị khóa chính của hàng đã chọn từ cột MaHD (hoặc khóa chính tương ứng) trong bảng hiển thị
        String maHoaDon = tableHoaDon.getValueAt(selectedRow, 0).toString(); // Giả sử cột đầu tiên là MaHD

        try {
            Connection conn = DatabaseConnection.getConnection();

            // Xóa dữ liệu liên quan trong bảng CTHD
            String sqlXoaCTHD = "DELETE FROM CHITIETHDN WHERE MaHDN = ?";
            PreparedStatement preparedStatementCTHD = conn.prepareStatement(sqlXoaCTHD);
            preparedStatementCTHD.setString(1, maHoaDon);
            preparedStatementCTHD.executeUpdate();

            // Xóa dữ liệu liên quan trong bảng HOADONNHAP
            String sqlXoaHoaDon = "DELETE FROM HOADONNHAP WHERE MaHDN = ?";
            PreparedStatement preparedStatementHoaDon = conn.prepareStatement(sqlXoaHoaDon);
            preparedStatementHoaDon.setString(1, maHoaDon);
            int rowsUpdatedHoaDon = preparedStatementHoaDon.executeUpdate();

            if (rowsUpdatedHoaDon > 0) {
                JOptionPane.showMessageDialog(this, "Xóa hóa đơn thành công!", "Thành công", JOptionPane.INFORMATION_MESSAGE);

                // Xóa hàng đã chọn từ bảng hiển thị
                DefaultTableModel model = (DefaultTableModel) tableHoaDon.getModel();
                model.removeRow(selectedRow);
            } else {
                JOptionPane.showMessageDialog(this, "Không thể xóa hóa đơn!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi xóa hóa đơn: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnXoaHDActionPerformed

    private void btnThoatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThoatActionPerformed
        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn thoát?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            // Ẩn form Main
            this.setVisible(false);

            // Tạo và hiển thị form đăng nhập
            FormMain formMain = new FormMain();
            formMain.setLocationRelativeTo(null);
            formMain.setVisible(true);
        }
    }//GEN-LAST:event_btnThoatActionPerformed

     // Hàm này sẽ trả về maNganh dựa trên tenNganh
    private String getMaNganhFromTenNganh(String tenNganh) throws SQLException {
        Connection conn = DatabaseConnection.getConnection();
        String sql = "SELECT MaNganh FROM NGANHHANG WHERE TenNganh = ?";
        PreparedStatement preparedStatement = conn.prepareStatement(sql);
        preparedStatement.setString(1, tenNganh);
        ResultSet resultSet = preparedStatement.executeQuery();
        if (resultSet.next()) {
            return resultSet.getString("MaNganh");
        }
        return null; // Hoặc bạn có thể xử lý logic khi không tìm thấy tenNganh
    }
    
    private void btnSuaHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaHDActionPerformed
        String maHoaDon = txtMaHoaDon.getText();
        capNhatThongTinHoaDon(maHoaDon);
    }//GEN-LAST:event_btnSuaHDActionPerformed
    private void capNhatThongTinNhanVien(String maNhanVien) {
         try {
            Connection conn = DatabaseConnection.getConnection();
            conn.setAutoCommit(false); // Tắt chế độ auto-commit

            String sql = "UPDATE NHANVIEN SET MaNv = ?";
            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            preparedStatement.setString(1, maNhanVien);;
            

            conn.setAutoCommit(true); // Bật lại chế độ auto-commit sau khi xử lý giao dịch
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật thông tin Nhân viên: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void capNhatThongTinKhachHang1(String maNCC) {
        // Lấy thông tin mới từ các trường nhập liệu
        String TenNCC = txtTenNCC.getText();
        String sdtNCC = txtSDTNCC.getText();
        String email = txtEmailNCC.getText();
        String diaChiKh = txtDiaChiNCC.getText();

        try {
            Connection conn = DatabaseConnection.getConnection();
            conn.setAutoCommit(false); // Tắt chế độ auto-commit

            String sql = "UPDATE NHACUNGCAP SET TenNCC = ?, SDT = ?, Email = ?, DiaChi = ? WHERE MaNCC = ?";
            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            preparedStatement.setString(1, TenNCC);
            preparedStatement.setString(2, sdtNCC);
            preparedStatement.setString(3, email);
            preparedStatement.setString(4, diaChiKh);
            preparedStatement.setString(5, maNCC);
            
            loadDataToTableHoaDon();

            conn.setAutoCommit(true); // Bật lại chế độ auto-commit sau khi xử lý giao dịch
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật thông tin khách hàng: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }  

    
    private void capNhatThongTinHoaDon(String maHoaDon) {
        String maNCC = txtMaNCC.getText();
        String maNhanVien = cBMaNV.getSelectedItem().toString();
        String ngayLapStr = txtNgayLap.getText();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); // Định dạng ngày
        java.sql.Date ngayLap = null;
        
        try {
            java.util.Date parsedDate = dateFormat.parse(ngayLapStr);
            ngayLap = new java.sql.Date(parsedDate.getTime());
        } catch (ParseException ex) {
            ex.printStackTrace();
            // Xử lý lỗi nếu có
        }
        
        // Kiểm tra xem các thông tin cần thiết đã được nhập chưa
        if (maNCC.isEmpty() || maNhanVien.isEmpty() || ngayLap == null) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return; // Không tiến hành cập nhật nếu thông tin còn thiếu
        }

        try {
            Connection conn = DatabaseConnection.getConnection();
            String sql = "UPDATE HOADONNHAP SET MaNCC = ?, MaNv = ?, NgayLap = ? , TongTien = ? WHERE MaHDN = ?";
            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            preparedStatement.setString(1, maNCC);
            preparedStatement.setString(2, maNhanVien);
            preparedStatement.setDate(3, new java.sql.Date(ngayLap.getTime()));
            int thanhTien = Integer.parseInt(txtThanhTien.getText());
            preparedStatement.setInt(4, thanhTien);

            preparedStatement.setString(5, maHoaDon);

            int rowsUpdated = preparedStatement.executeUpdate();

            if (rowsUpdated > 0) {
                // Cập nhật thành công
                // Gọi các hàm cập nhật thông tin trong các bảng khác ở dưới
                capNhatThongTinNhanVien(maNhanVien);
                capNhatThongTinKhachHang1(maNCC);
                capNhatThongTinChiTietHoaDon(maHoaDon);
                JOptionPane.showMessageDialog(this, "Cập nhật thông tin hóa đơn thành công!", "Thành công", JOptionPane.INFORMATION_MESSAGE);
                loadDataToTableHoaDon();
            } else {
                JOptionPane.showMessageDialog(this, "Không thể cập nhật thông tin hóa đơn!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật thông tin: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    
    private void capNhatThongTinChiTietHoaDon(String maHoaDon) {
        // Lấy thông tin mới từ các trường nhập liệu
        String maHang = txtMaSP.getText();
        int soLuong = Integer.parseInt(tfSoLuong.getText());

        try {
            Connection conn = DatabaseConnection.getConnection();
            String sql = "UPDATE CHITIETHDN SET MaHang = ?, SoLuong = ? WHERE MaHDN = ?";
            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            preparedStatement.setString(1, maHang);
            preparedStatement.setInt(2, soLuong);
            preparedStatement.setString(3, maHoaDon);   // Correct index for MaHDN

            int rowsUpdated = preparedStatement.executeUpdate();

            if (rowsUpdated <= 0) {
                JOptionPane.showMessageDialog(this, "Không thể cập nhật thông tin chi tiết hóa đơn!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật thông tin chi tiết hóa đơn: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }


    
    private void btnThemHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemHDActionPerformed

        // Lấy thông tin từ các thẻ
        String maNCC = txtMaNCC.getText();
        String TenNCC = txtTenNCC.getText();
        String sdtNCC = txtSDTNCC.getText();
        String emailNCC = txtEmailNCC.getText();
        String diaChiKh = txtDiaChiNCC.getText();

        String maHoaDon = txtMaHoaDon.getText();
        String maNhanVien = cBMaNV.getSelectedItem().toString();
        String tenNv = txtTenNV.getText();
        String maSanPham = txtMaSP.getText();
        String tenSanPham = txtTenSP.getText();
        String loaiSanPham = cBLoaiSP.getSelectedItem().toString();

        int donGia = Integer.parseInt(txtDonGia.getText());
        int soLuong = Integer.parseInt(tfSoLuong.getText());
        int thanhTien = Integer.parseInt(txtThanhTien.getText());

        // Lấy và chuyển đổi dữ liệu ngày lập
        String ngayLapStr = txtNgayLap.getText();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); // Định dạng ngày
        java.sql.Date ngayLap = null;
        try {
            java.util.Date parsedDate = dateFormat.parse(ngayLapStr);
            ngayLap = new java.sql.Date(parsedDate.getTime());
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Định dạng ngày không hợp lệ! Vui lòng nhập ngày theo định dạng yyyy-MM-dd.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
            return; // Thoát khỏi phương thức nếu ngày không hợp lệ
        }

        // Kiểm tra xem các thông tin cần thiết đã được nhập chưa
        if (maNCC.isEmpty() || maNhanVien.isEmpty() || ngayLap == null) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return; // Không tiến hành cập nhật nếu thông tin còn thiếu
        }

        Connection conn = null;
        try {
            String maNganh = getMaNganhFromTenNganh(loaiSanPham);

            conn = DatabaseConnection.getConnection();
            conn.setAutoCommit(false); // Tắt chế độ tự động commit

            boolean khachHangDaTonTai = kiemTraTonTaiKhachHang(maNCC);
            if (!khachHangDaTonTai) {
                // Thêm thông tin khách hàng vào bảng NHACUNGCAP
                String sqlInsertKhachHang = "INSERT INTO NHACUNGCAP (MaNCC, TenNCC, DienThoai, Email, DiaChi) VALUES (?, ?, ?, ?, ?)";
                PreparedStatement preparedStatementKhachHang = conn.prepareStatement(sqlInsertKhachHang);
                preparedStatementKhachHang.setString(1, maNCC);
                preparedStatementKhachHang.setString(2, TenNCC);
                preparedStatementKhachHang.setString(3, sdtNCC);
                preparedStatementKhachHang.setString(4, emailNCC);
                preparedStatementKhachHang.setString(5, diaChiKh);
                preparedStatementKhachHang.executeUpdate();
            }
            
            boolean hangHoaTonTai = kiemTraTonTaiHang(maSanPham);
            if (!hangHoaTonTai) {
                // Tạo truy vấn SQL để thêm sản phẩm mới
                    String sql = "INSERT INTO HANGHOA (MaHang, MaNganh, TenHang, DonGia, SoLuongKho) VALUES (?, ?, ?, ?, ?)";
                    PreparedStatement preparedStatement = conn.prepareStatement(sql);
                    preparedStatement.setString(1, maSanPham);
                    preparedStatement.setString(2, maNganh);
                    preparedStatement.setString(3, tenSanPham);
                    preparedStatement.setInt(4, donGia);
                    preparedStatement.setInt(5, soLuong);
                    int rowsAffected = preparedStatement.executeUpdate();
            } else {
                // Nếu sản phẩm đã tồn tại, cập nhật số lượng sản phẩm
                String updateQuery = "UPDATE HANGHOA SET SoLuongKho = SoLuongKho + ? WHERE MaHang = ?";
                PreparedStatement updateStatement = conn.prepareStatement(updateQuery);
                updateStatement.setInt(1, soLuong);
                updateStatement.setString(2, maSanPham);
                int rowsUpdated = updateStatement.executeUpdate();
            }
            
            // Thêm thông tin hóa đơn vào bảng HOADONNHAP
            String sqlInsertHoaDon = "INSERT INTO HOADONNHAP (MaHDN, MaNCC, MaNv, NgayLap, TongTien) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement preparedStatementHoaDon = conn.prepareStatement(sqlInsertHoaDon);
            preparedStatementHoaDon.setString(1, maHoaDon);
            preparedStatementHoaDon.setString(2, maNCC);
            preparedStatementHoaDon.setString(3, maNhanVien);
            preparedStatementHoaDon.setDate(4, ngayLap);
            preparedStatementHoaDon.setInt(5, thanhTien);
            preparedStatementHoaDon.executeUpdate();

            // Thêm thông tin chi tiết hóa đơn vào bảng CHITIETHDN
            Random random = new Random();
            int i = random.nextInt(1000); 
            String sqlInsertChiTietHoaDon = "INSERT INTO CHITIETHDN (MaCTHDN, MaHDN, MaHang, SoLuong, DonGia) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement preparedStatementChiTietHoaDon = conn.prepareStatement(sqlInsertChiTietHoaDon);
            preparedStatementChiTietHoaDon.setString(1, ("CTHDN" + i));
            preparedStatementChiTietHoaDon.setString(2, maHoaDon);
            preparedStatementChiTietHoaDon.setString(3, maSanPham);
            preparedStatementChiTietHoaDon.setInt(4, soLuong);
            preparedStatementChiTietHoaDon.setInt(5, donGia);
            preparedStatementChiTietHoaDon.executeUpdate();

            // Commit dữ liệu vào cơ sở dữ liệu
            conn.commit();
            loadDataToTableHoaDon(); // Nạp lại dữ liệu vào bảng hóa đơn sau khi thêm thành công
            JOptionPane.showMessageDialog(this, "Thêm hóa đơn thành công!", "Thành công", JOptionPane.INFORMATION_MESSAGE);
           

            // Xóa dữ liệu nhập vào sau khi thêm thành công
            txtMaNCC.setText("");
            txtTenNCC.setText("");
            txtSDTNCC.setText("");
            txtEmailNCC.setText("");
            txtDiaChiNCC.setText("");

            cBMaNV.setSelectedIndex(0);
            txtTenNV.setText("");
            txtSDTNV.setText("");

            cBLoaiSP.setSelectedIndex(0);
            txtMaSP.setText("");
            tfSoLuong.setText("");
            txtThanhTien.setText("");
            txtNgayLap.setText("");

        } catch (SQLException ex) {
            try {
                if (conn != null) {
                    conn.rollback(); // Rollback nếu có lỗi xảy ra
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            JOptionPane.showMessageDialog(this, "Lỗi khi thêm hóa đơn: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (conn != null) {
                    conn.setAutoCommit(true); // Mở lại chế độ tự động commit
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnThemHDActionPerformed

    private boolean kiemTraTonTaiKhachHang(String maNCC) {
        boolean tonTai = false;
        try {
            Connection conn = DatabaseConnection.getConnection();
            String sql = "SELECT * FROM NHACUNGCAP WHERE MaNCC = ?";
            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            preparedStatement.setString(1, maNCC);
            ResultSet resultSet = preparedStatement.executeQuery();
            tonTai = resultSet.next();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi kiểm tra mã khách hàng: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
        return tonTai;
    } 
    
    private boolean kiemTraTonTaiHang(String maSanPham) {
        boolean tonTai = false;
        try {
            Connection conn = DatabaseConnection.getConnection();
            String sql = "SELECT * FROM HANGHOA WHERE MaHang = ?";
            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            preparedStatement.setString(1, maSanPham);
            ResultSet resultSet = preparedStatement.executeQuery();
            tonTai = resultSet.next();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi kiểm tra mã khách hàng: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
        return tonTai;
    }
    
    private void btnCTHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCTHDActionPerformed
        // Tạo form 
        FormCTHDN formCTHD = new FormCTHDN(); // Truyền tham số 


        // Hiển thị form
        formCTHD.setVisible(true);
    }//GEN-LAST:event_btnCTHDActionPerformed

    private void txtDiaChiNCCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDiaChiNCCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDiaChiNCCActionPerformed

    private void txtNgayLapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNgayLapActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNgayLapActionPerformed

    private void txtMaHoaDonFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMaHoaDonFocusLost
                                      
        String maHD = txtMaHoaDon.getText().trim(); // Lấy mã hóa đơn từ JTextField và loại bỏ khoảng trắng thừa

        if (!maHD.isEmpty()) {
            try {
                Connection conn = DatabaseConnection.getConnection();

                // Truy vấn để lấy dữ liệu từ bảng HOADONNHAP và các bảng liên quan
                String sql = "SELECT HOADONNHAP.MaHDN, HOADONNHAP.MaNCC, HOADONNHAP.MaNv, HOADONNHAP.NgayLap, HOADONNHAP.TongTien, " +
                         "NHACUNGCAP.TenNCC, NHACUNGCAP.DienThoai AS SDTNCC, NHACUNGCAP.Email AS emailNCC, NHACUNGCAP.DiaChi AS diaChiNCC,NHANVIEN.TenNhanVien, NHANVIEN.SDT AS SDTNhanVien, " +
                         "HANGHOA.TenHang AS TenSanPham, CHITIETHDN.MaHang, HANGHOA.DonGia, CHITIETHDN.SoLuong, NGANHHANG.TenNganh " +
                         "FROM HOADONNHAP " +
                         "INNER JOIN NHACUNGCAP ON HOADONNHAP.MaNCC = NHACUNGCAP.MaNCC " +
                         "INNER JOIN NHANVIEN ON HOADONNHAP.MaNv = NHANVIEN.MaNv " +
                         "INNER JOIN CHITIETHDN ON HOADONNHAP.MaHDN = CHITIETHDN.MaHDN " +
                         "INNER JOIN HANGHOA ON CHITIETHDN.MaHang = HANGHOA.MaHang " +
                         "INNER JOIN NGANHHANG ON NGANHHANG.MaNganh = HANGHOA.MaNganh " +
                         "WHERE HOADONNHAP.MaHDN = ?";
                PreparedStatement preparedStatement = conn.prepareStatement(sql);
                preparedStatement.setString(1, maHD);
                ResultSet resultSet = preparedStatement.executeQuery();

                if (resultSet.next()) {
                    // Đổ dữ liệu từ ResultSet vào các JTextField và JComboBox tương ứng
                    txtMaNCC.setText(resultSet.getString("MaNCC"));
                    txtTenNCC.setText(resultSet.getString("TenNCC"));
                    txtSDTNCC.setText(resultSet.getString("SDTNCC"));                      
                    txtDiaChiNCC.setText(resultSet.getString("diaChiNCC"));                
                    txtEmailNCC.setText(resultSet.getString("emailNCC"));

                    cBMaNV.setSelectedItem(resultSet.getString("MaNv"));
                    txtTenNV.setText(resultSet.getString("TenNhanVien"));
                    txtSDTNV.setText(resultSet.getString("SDTNhanVien"));

                    cBLoaiSP.setSelectedItem(resultSet.getString("TenNganh"));
                    txtMaSP.setText(resultSet.getString("MaHang"));
                    txtTenSP.setText(resultSet.getString("TenSanPham"));                 
                    txtDonGia.setText(resultSet.getString("DonGia"));
                    tfSoLuong.setText(resultSet.getString("SoLuong"));
                    txtThanhTien.setText(resultSet.getString("TongTien"));

                    // Format và hiển thị ngày lập
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                    Date ngayLap = resultSet.getDate("NgayLap");
                    String ngayLapStr = dateFormat.format(ngayLap);
                    txtNgayLap.setText(ngayLapStr);

                    // Reset biến flag
                    showError = false;
                } else {
                    // Không tìm thấy mã hóa đơn
                    if (!showError) { // Kiểm tra biến flag trước khi hiển thị thông báo
                        JOptionPane.showMessageDialog(this, "Không tìm thấy mã hóa đơn này!", "Không tìm thấy", JOptionPane.ERROR_MESSAGE);
                        showError = true; // Đánh dấu đã hiển thị thông báo
                    }

                    // Xóa dữ liệu từ các JTextField và JComboBox tương ứng
                    txtMaNCC.setText("");
                    txtTenNCC.setText("");
                    txtSDTNCC.setText("");
                    cBLoaiSP.setSelectedIndex(0); // Đặt lại chỉ mục mặc định cho JComboBox
                    txtDiaChiNCC.setText("");

                    cBMaNV.setSelectedIndex(0); // Đặt lại chỉ mục mặc định cho JComboBox
                    txtTenNV.setText("");
                    txtSDTNV.setText("");

                    cBLoaiSP.setSelectedIndex(0); // Đặt lại chỉ mục mặc định cho JComboBox
                    txtMaSP.setText("");
                    tfSoLuong.setText("");
                    txtThanhTien.setText("");
                    txtNgayLap.setText("");
                }

                // Đóng kết nối và tài nguyên
                preparedStatement.close();
                resultSet.close();
//                conn.close();

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Lỗi khi tìm kiếm mã hóa đơn: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
}

     {
         
    }//GEN-LAST:event_txtMaHoaDonFocusLost

    private void txtSDTNVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSDTNVActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSDTNVActionPerformed
    
    private void loadMaNhanVienToComboBox() {
        try {
            Connection conn = DatabaseConnection.getConnection();
            String sql = "SELECT MaNv FROM NHANVIEN";
            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                String maNhanVien = resultSet.getString("MaNv");
                cBMaNV.addItem(maNhanVien);
            }

            // Đóng kết nối cơ sở dữ liệu (nếu cần)
            // conn.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi nạp dữ liệu mã nhân viên: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void cBMaNVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cBMaNVActionPerformed
        String selectedMaNhanVien = cBMaNV.getSelectedItem().toString();
        if (!selectedMaNhanVien.isEmpty()) {
            try {
                Connection conn = DatabaseConnection.getConnection();
                String sql = "SELECT TenNhanVien, SDT FROM NHANVIEN WHERE MaNv = ?";
                PreparedStatement preparedStatement = conn.prepareStatement(sql);
                preparedStatement.setString(1, selectedMaNhanVien);
                ResultSet resultSet = preparedStatement.executeQuery();

                if (resultSet.next()) {
                    String tenNhanVien = resultSet.getString("TenNhanVien");
                    String sdtNhanVien = resultSet.getString("SDT");
                    txtTenNV.setText(tenNhanVien);
                    txtSDTNV.setText(sdtNhanVien);
                } else {
                    // Xử lý trường hợp không tìm thấy thông tin nhân viên
                    txtTenNV.setText("");
                    txtSDTNV.setText("");
                }

                // Đóng kết nối cơ sở dữ liệu (nếu cần)
                // conn.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Lỗi khi tìm kiếm thông tin nhân viên: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_cBMaNVActionPerformed

    private void loadTenSPToComboBox() {
        try {
            Connection conn = DatabaseConnection.getConnection();
            String sql = "SELECT TenNganh FROM NGANHHANG";
            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                String tenNganh = resultSet.getString("tenNganh");
                cBLoaiSP.addItem(tenNganh);
            }

            // Đóng kết nối cơ sở dữ liệu (nếu cần)
            // conn.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi nạp dữ liệu mã nhân viên: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void txtMaNCCKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMaNCCKeyReleased
        String maNCC = txtMaNCC.getText();
        if (!maNCC.isEmpty()) {
            // Kiểm tra xem mã khách hàng đã tồn tại trong cơ sở dữ liệu chưa
            if (kiemTraMaNCCTonTai(maNCC)) {
                // Mã khách hàng tồn tại, đổ dữ liệu từ cơ sở dữ liệu
                hienThiThongTinNCC(maNCC);
            } else {
                // Mã khách hàng không tồn tại, cho phép người dùng nhập các trường còn lại
                resetThongTinKhachHang();
            }
        }
    }//GEN-LAST:event_txtMaNCCKeyReleased

    private void txtThanhTienKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtThanhTienKeyReleased

    }//GEN-LAST:event_txtThanhTienKeyReleased

    private void tfSoLuongKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfSoLuongKeyReleased
        tinhTien();
    }//GEN-LAST:event_tfSoLuongKeyReleased

    private void txtMaSPKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMaSPKeyReleased

    }//GEN-LAST:event_txtMaSPKeyReleased

    private void txtTenSPKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTenSPKeyReleased
        tinhTien();
    }//GEN-LAST:event_txtTenSPKeyReleased

    private void txtMaNCCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaNCCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaNCCActionPerformed

    private void txtDonGiaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDonGiaKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDonGiaKeyReleased

    private void cBLoaiSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cBLoaiSPActionPerformed
        String selectedTenSP = cBLoaiSP.getSelectedItem().toString();
        if (!selectedTenSP.isEmpty()) {
            try {
                Connection conn = DatabaseConnection.getConnection();
                String sql = "SELECT MaHang, DonGia FROM HANGHOA WHERE TenHang = ?";
                PreparedStatement preparedStatement = conn.prepareStatement(sql);
                preparedStatement.setString(1, selectedTenSP);
                ResultSet resultSet = preparedStatement.executeQuery();

                if (resultSet.next()) {
                    String maSanPham = resultSet.getString("MaHang");
                    String donGia = resultSet.getString("DonGia");
                    txtMaSP.setText(maSanPham);
                    txtTenSP.setText(donGia);
                } else {
                    // Xử lý trường hợp không tìm thấy thông tin nhân viên
                    txtMaSP.setText("");
                    txtTenSP.setText("");
                }

                // Đóng kết nối cơ sở dữ liệu (nếu cần)
                // conn.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Lỗi khi tìm kiếm thông tin nhân viên: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_cBLoaiSPActionPerformed
    
    private void txtMaSPFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMaSPFocusLost
        String maHang = txtMaSP.getText();

        if (!maHang.isEmpty()) {
            try {
                Connection conn = DatabaseConnection.getConnection();

                String sql = "SELECT H.MaHang, H.TenHang, H.MaNganh, N.TenNganh, H.DonGia, H.SoLuongKho " +
                             "FROM HANGHOA H " +
                             "JOIN NGANHHANG N ON H.MaNganh = N.MaNganh " +
                             "WHERE H.MaHang = ?"; 

                PreparedStatement preparedStatement = conn.prepareStatement(sql);
                preparedStatement.setString(1, maHang);
                ResultSet resultSet = preparedStatement.executeQuery();

                if (resultSet.next()) {
                    // Đổ dữ liệu từ ResultSet vào các JTextField và JComboBox tương ứng
                    txtTenSP.setText(resultSet.getString("TenHang"));
                    String tenNganh = resultSet.getString("TenNganh");

                    // Xóa tất cả các mục cũ trong JComboBox và thêm mục mới
                    cBLoaiSP.addItem(tenNganh);
                    loadTenSPToComboBox();

                    txtDonGia.setText(resultSet.getString("DonGia"));
                    tfSoLuong.setText(resultSet.getString("SoLuongKho"));

                    // Reset biến flag
                    showError = false;
                } else {
                    // Không tìm thấy mã sản phẩm
                    if (!showError) { // Kiểm tra biến flag trước khi hiển thị thông báo
                        JOptionPane.showMessageDialog(this, "Không tìm thấy mã sản phẩm này!", "Không tìm thấy", JOptionPane.ERROR_MESSAGE);
                        showError = true; // Đánh dấu đã hiển thị thông báo
                    }

                    // Xóa dữ liệu từ các JTextField và ComboBox tương ứng
                    txtTenSP.setText(""); // Tải lại danh sách tenNganh vào ComboBox
                    txtDonGia.setText("");
                    tfSoLuong.setText("");
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Lỗi khi tìm kiếm mã: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }                   
     
    }//GEN-LAST:event_txtMaSPFocusLost
    
    private void tinhTien() {
    try {
        // Lấy giá trị từ txtDonGia và tfSoLuong
        int donGia = Integer.parseInt(txtDonGia.getText());
        int soLuong = Integer.parseInt(tfSoLuong.getText());

        // Tính toán thành tiền
        int thanhTien = donGia * soLuong;

        // Hiển thị kết quả trong txtThanhTien
        txtThanhTien.setText(String.valueOf(thanhTien));
    } catch (NumberFormatException ex) {
        // Xử lý lỗi nếu người dùng nhập không hợp lệ (không phải số)
        txtThanhTien.setText("0"); // Có thể hiển thị một giá trị mặc định khác
    }
}
    
    // Kiểm tra xem mã khách hàng đã tồn tại trong cơ sở dữ liệu chưa
    private boolean kiemTraMaNCCTonTai(String maNCC) {
        // Thực hiện truy vấn kiểm tra mã khách hàng tồn tại ở đây
        // Trả về true nếu mã tồn tại, false nếu không tồn tại
        // Ví dụ:
        try {
            Connection conn = DatabaseConnection.getConnection();
            String sql = "SELECT * FROM NHACUNGCAP WHERE MaNCC = ?";
            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            preparedStatement.setString(1, maNCC);
            ResultSet resultSet = preparedStatement.executeQuery();

            return resultSet.next(); // Trả về true nếu tồn tại, false nếu không tồn tại
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi kiểm tra mã khách hàng: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            return false; // Xảy ra lỗi, trả về false để không thực hiện hàm khác
        }
    }

    // Đổ dữ liệu khách hàng từ cơ sở dữ liệu
    private void hienThiThongTinNCC(String maNCC) {
        try {
            Connection conn = DatabaseConnection.getConnection();
            String sql = "SELECT * FROM NHACUNGCAP WHERE MaNCC = ?";
            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            preparedStatement.setString(1, maNCC);
            ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                // Lấy thông tin từ ResultSet và hiển thị trên các trường tương ứng
                String TenNCC = resultSet.getString("TenNCC");
                String sdtNCC = resultSet.getString("DienThoai");
                String emailNCC = resultSet.getString("Email");
                String diaChiNCC = resultSet.getString("DiaChi");

                txtTenNCC.setText(TenNCC);
                txtSDTNCC.setText(sdtNCC);                
                txtEmailNCC.setText(emailNCC);
                txtDiaChiNCC.setText(diaChiNCC);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi hiển thị thông tin khách hàng: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Xóa thông tin khách hàng trên các trường
    private void resetThongTinKhachHang() {
        txtTenNCC.setText("");
        txtSDTNCC.setText("");
        txtEmailNCC.setText("");
        txtDiaChiNCC.setText("");
    }

    
    private boolean showError = false; // Thêm biến flag
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormHoaDonNhap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormHoaDonNhap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormHoaDonNhap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormHoaDonNhap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormHoaDonNhap().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cBLoaiSP;
    private javax.swing.JComboBox<String> cBMaNV;
    private javax.swing.JTable tableHoaDon;
    private javax.swing.JTextField tfSoLuong;
    private javax.swing.JTextField txtDiaChiNCC;
    private javax.swing.JTextField txtDonGia;
    private javax.swing.JTextField txtEmailNCC;
    private javax.swing.JTextField txtMaHoaDon;
    private javax.swing.JTextField txtMaNCC;
    private javax.swing.JTextField txtMaSP;
    private javax.swing.JTextField txtNgayLap;
    private javax.swing.JTextField txtSDTNCC;
    private javax.swing.JTextField txtSDTNV;
    private javax.swing.JTextField txtTenNCC;
    private javax.swing.JTextField txtTenNV;
    private javax.swing.JTextField txtTenSP;
    private javax.swing.JTextField txtThanhTien;
    // End of variables declaration//GEN-END:variables
}
