/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.qlbh.ql;
import ConnectDtb.DatabaseConnection;
import com.qlbh.main.FormMain;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author MINH TUNG
 */
public class FormTaiKhoan extends javax.swing.JFrame {

    /**
     * Creates new form FormTaiKhoan
     */
    public FormTaiKhoan() {
        initComponents();
        loadDataToTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        tableSanPham = new javax.swing.JTable();
        javax.swing.JPanel jpSanPham = new javax.swing.JPanel();
        javax.swing.JLabel jLabel = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel6 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel8 = new javax.swing.JLabel();
        txtPassWord = new javax.swing.JTextField();
        txtIDTK = new javax.swing.JTextField();
        javax.swing.JLabel jLabel7 = new javax.swing.JLabel();
        txtMaNV = new javax.swing.JTextField();
        cBQuyenTK = new javax.swing.JComboBox<>();
        jbDanhSachSanPham = new javax.swing.JLabel();
        javax.swing.JButton btnXoaTK = new javax.swing.JButton();
        javax.swing.JButton btnThemTK = new javax.swing.JButton();
        javax.swing.JButton btnThoat = new javax.swing.JButton();
        javax.swing.JButton btnSuaTK = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Quản lý tài khoản");

        tableSanPham.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Username", "PassWord", "Quyền", "Mã Nhân Viên"
            }
        ));
        jScrollPane1.setViewportView(tableSanPham);

        jpSanPham.setBackground(new java.awt.Color(102, 255, 204));
        jpSanPham.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin tài khoản", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 16))); // NOI18N

        jLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel.setText("ID Tài khoản");

        txtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Quyền");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Username");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("PassWord");

        txtIDTK.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIDTKFocusLost(evt);
            }
        });
        txtIDTK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDTKActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Mã NV");

        cBQuyenTK.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nhân Viên", "Admin" }));
        cBQuyenTK.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cBQuyenTK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cBQuyenTKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpSanPhamLayout = new javax.swing.GroupLayout(jpSanPham);
        jpSanPham.setLayout(jpSanPhamLayout);
        jpSanPhamLayout.setHorizontalGroup(
            jpSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpSanPhamLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpSanPhamLayout.createSequentialGroup()
                        .addGroup(jpSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jpSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                            .addComponent(txtIDTK)
                            .addComponent(txtPassWord, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                            .addComponent(cBQuyenTK, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jpSanPhamLayout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtMaNV, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)))
                .addGap(12, 12, 12))
        );
        jpSanPhamLayout.setVerticalGroup(
            jpSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpSanPhamLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtIDTK, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(txtPassWord, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cBQuyenTK, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpSanPhamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        jbDanhSachSanPham.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jbDanhSachSanPham.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jbDanhSachSanPham.setText("Quản lý tài khoản");
        jbDanhSachSanPham.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        btnXoaTK.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnXoaTK.setText("Xóa");
        btnXoaTK.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnXoaTK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaTKActionPerformed(evt);
            }
        });

        btnThemTK.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnThemTK.setText("Thêm");
        btnThemTK.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnThemTK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemTKActionPerformed(evt);
            }
        });

        btnThoat.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnThoat.setText("Thoát");
        btnThoat.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnThoat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThoatActionPerformed(evt);
            }
        });

        btnSuaTK.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSuaTK.setText("Sửa");
        btnSuaTK.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSuaTK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaTKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jbDanhSachSanPham, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jpSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnSuaTK, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                            .addComponent(btnThemTK, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnXoaTK, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                            .addComponent(btnThoat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbDanhSachSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnThemTK, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnXoaTK, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnSuaTK, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                            .addComponent(btnThoat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadDataToTable() {
        try {
            Connection conn = DatabaseConnection.getConnection();
            String sql = "SELECT * FROM TAIKHOAN";

            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            ResultSet resultSet = preparedStatement.executeQuery();

            DefaultTableModel model = (DefaultTableModel) tableSanPham.getModel();
            model.setRowCount(0); // Xóa tất cả dữ liệu cũ trong bảng

            while (resultSet.next()) {
                Vector row = new Vector();
                row.add(resultSet.getString("ID")); 
                row.add(resultSet.getString("UserName")); 
                row.add(resultSet.getString("PassWord")); 
                row.add(resultSet.getString("Role")); 
                row.add(resultSet.getString("MaNv")); 

                model.addRow(row);
            }

    //        conn.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi đọc dữ liệu từ cơ sở dữ liệu: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsernameActionPerformed
   
    private boolean showError = false; // Thêm biến flag
    private void txtIDTKFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIDTKFocusLost
        String IDTK = txtIDTK.getText();

        if (!IDTK.isEmpty()) {
            try {
                Connection conn = DatabaseConnection.getConnection();

                String sql = "SELECT * FROM TAIKHOAN WHERE ID = ?";
                PreparedStatement preparedStatement = conn.prepareStatement(sql);
                preparedStatement.setString(1, IDTK);
                ResultSet resultSet = preparedStatement.executeQuery();

                if (resultSet.next()) {
                    // Đổ dữ liệu từ ResultSet vào các JTextField và JComboBox tương ứng
                    txtUsername.setText(resultSet.getString("UserName"));
                    txtPassWord.setText(resultSet.getString("PassWord"));
                    
                    String role = resultSet.getString("Role");
                    cBQuyenTK.setSelectedItem (role);
                    txtMaNV.setText(resultSet.getString("MaNv"));

                    // Reset biến flag
                    showError = false;
                } else {
                    // Không tìm thấy mã khách hàng
                    if (!showError) { // Kiểm tra biến flag trước khi hiển thị thông báo
                        JOptionPane.showMessageDialog(this, "Không tìm thấy mã này!", "Không tìm thấy", JOptionPane.ERROR_MESSAGE);
                        showError = true; // Đánh dấu đã hiển thị thông báo
                    }

                    // Xóa dữ liệu từ các JTextField và JComboBox tương ứng
                    txtUsername.setText("");
                    txtPassWord.setText("");
                    txtMaNV.setText("");
                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Lỗi khi tìm kiếm mã: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_txtIDTKFocusLost

    private void txtIDTKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDTKActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDTKActionPerformed

    private void btnXoaTKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaTKActionPerformed
        int row = tableSanPham.getSelectedRow();

        if (row < 0) {
            JOptionPane.showMessageDialog(this,
                "Không có hàng nào được chọn! Vui lòng chọn một hàng",
                "Chọn hàng!",
                JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                Connection conn = DatabaseConnection.getConnection();

                // Lấy mã từ hàng được chọn
                String maTK = tableSanPham.getValueAt(row, 0).toString();

                // Tạo truy vấn SQL để xóa nhân viên dựa trên mã nhân viên
                String sql = "DELETE FROM TAIKHOAN WHERE id = ?";
                PreparedStatement preparedStatement = conn.prepareStatement(sql);
                preparedStatement.setString(1, maTK);

                // Thực hiện truy vấn
                int rowsAffected = preparedStatement.executeUpdate();

                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Xóa tài khoản thành công!");
                    // Xóa hàng khỏi bảng
                    DefaultTableModel model = (DefaultTableModel) tableSanPham.getModel();
                    model.removeRow(row);
                } else {
                    JOptionPane.showMessageDialog(this, "Xóa tài khoản thất bại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                }

                // Đóng kết nối cơ sở dữ liệu
                //               conn.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Lỗi khi xóa SP: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnXoaTKActionPerformed

    private void btnThemTKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemTKActionPerformed
        // Lấy thông tin từ các trường nhập liệu
        String maTK = txtIDTK.getText();
        String Username = txtUsername.getText();
        String Password = txtPassWord.getText();

        // Lấy giá trị từ JComboBox cBQuyenTK
        String QuyenTK = (String) cBQuyenTK.getSelectedItem(); // Chuyển đổi thành kiểu dữ liệu phù hợp

        String maNV = txtMaNV.getText();

        // Kiểm tra xem các trường nhập liệu đã được điền đầy đủ chưa
        if (maTK.isEmpty() || Username.isEmpty() || Password.isEmpty() || QuyenTK.isEmpty() || maNV.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập đủ thông tin!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                // Kết nối đến cơ sở dữ liệu
                Connection conn = DatabaseConnection.getConnection();

                // Kiểm tra xem mã nhân viên đã tồn tại trong bảng NHANVIEN hay không
                String checkNhanVienSql = "SELECT * FROM NHANVIEN WHERE MaNv = ?";
                PreparedStatement checkNhanVienStatement = conn.prepareStatement(checkNhanVienSql);
                checkNhanVienStatement.setString(1, maNV);
                ResultSet resultSetNhanVien = checkNhanVienStatement.executeQuery();

                if (!resultSetNhanVien.next()) {
                    // Nếu mã nhân viên không tồn tại trong bảng NHANVIEN, hiển thị thông báo và thoát
                    JOptionPane.showMessageDialog(this, "Mã nhân viên không tồn tại. Vui lòng kiểm tra lại.");
                } else {
                    // Kiểm tra xem mã nhân viên đã có tài khoản trong bảng TAIKHOAN hay chưa
                    String checkUserSql = "SELECT * FROM TAIKHOAN WHERE MaNv = ?";
                    PreparedStatement checkUserStatement = conn.prepareStatement(checkUserSql);
                    checkUserStatement.setString(1, maNV);
                    ResultSet resultSet = checkUserStatement.executeQuery();

                    if (resultSet.next()) {
                        // Nếu đã có tài khoản cho mã nhân viên này, hiển thị thông báo lỗi
                        JOptionPane.showMessageDialog(this, "Đã tồn tại tài khoản cho mã nhân viên này. Vui lòng chọn mã nhân viên khác.");
                    } else {
                        // Kiểm tra xem tên người dùng đã tồn tại trong cơ sở dữ liệu hay chưa
                        String checkUserNameSql = "SELECT COUNT(*) FROM TAIKHOAN WHERE UserName = ?";
                        PreparedStatement checkUserNameStatement = conn.prepareStatement(checkUserNameSql);
                        checkUserNameStatement.setString(1, Username);
                        ResultSet resultSetUser = checkUserNameStatement.executeQuery();
                        resultSetUser.next();
                        int userCount = resultSetUser.getInt(1);

                        if (userCount > 0) {
                            // Nếu tên người dùng đã tồn tại, hiển thị thông báo lỗi
                            JOptionPane.showMessageDialog(this, "Tên đăng nhập đã tồn tại. Vui lòng chọn tên đăng nhập khác.");
                        } else {
                            // Tạo truy vấn SQL INSERT để thêm tài khoản mới vào bảng TAIKHOAN
                            String insertUserSql = "INSERT INTO TAIKHOAN (UserName, PassWord, Role, MaNv) VALUES (?, ?, ?, ?)";
                            PreparedStatement insertUserStatement = conn.prepareStatement(insertUserSql);
                            insertUserStatement.setString(1, Username);
                            insertUserStatement.setString(2, Password);
                            insertUserStatement.setString(3, QuyenTK); 
                            insertUserStatement.setString(4, maNV);

                            // Thực hiện truy vấn INSERT
                            int rowsInserted = insertUserStatement.executeUpdate();

                            if (rowsInserted > 0) {
                                // Đăng ký thành công, hiển thị thông báo
                                loadDataToTable();
                                JOptionPane.showMessageDialog(this, "Thêm tài khoản thành công!");
                            } else {
                                // Đăng ký không thành công, hiển thị thông báo lỗi
                                JOptionPane.showMessageDialog(this, "Thêm tài khoản không thành công. Vui lòng thử lại.");
                            }
                        }
                    }
                }
                // Đóng kết nối cơ sở dữ liệu
                // conn.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Lỗi khi thêm Tài Khoản: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnThemTKActionPerformed

    private void btnThoatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThoatActionPerformed
        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn thoát?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            // Ẩn form Main
            this.setVisible(false);

            // Tạo và hiển thị form đăng nhập
            FormMain formMain = new FormMain();
            formMain.setLocationRelativeTo(null);
            formMain.setVisible(true);
        }
    }//GEN-LAST:event_btnThoatActionPerformed

    private void btnSuaTKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaTKActionPerformed
        // Lấy mã khách hàng từ trường nhập liệu
        String idTK = txtIDTK.getText();
        // Kiểm tra xem mã khách hàng đã tồn tại trong cơ sở dữ liệu chưa
        if (kiemTraTonTaiTK(idTK)) {
            // Mã khách hàng tồn tại, tiến hành cập nhật thông tin
            capNhatThongTinTK(idTK);
        } else {
            // Mã khách hàng không tồn tại, hiển thị thông báo lỗi
            JOptionPane.showMessageDialog(this, "Không tìm thấy Mã để sửa!", "Không tìm thấy", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSuaTKActionPerformed

     // Phương thức kiểm tra sự tồn tại của TK trong cơ sở dữ liệu
    private boolean kiemTraTonTaiTK(String idTK) {
        boolean tonTai = false;
        try {
            Connection conn = DatabaseConnection.getConnection();
            String sql = "SELECT * FROM TAIKHOAN WHERE ID = ?";
            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            preparedStatement.setString(1, idTK);
            ResultSet resultSet = preparedStatement.executeQuery();
            tonTai = resultSet.next();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi kiểm tra mã: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
        return tonTai;
    } 

    // Phương thức cập nhật thông tin khách hàng trong cơ sở dữ liệu
    private void capNhatThongTinTK(String idTK) {
        // Lấy thông tin mới từ các trường nhập liệu
        String Username = txtUsername.getText();
        String Password = txtPassWord.getText();

        // Lấy giá trị từ JComboBox cBQuyenTK
        String QuyenTK = (String) cBQuyenTK.getSelectedItem(); // Chuyển đổi thành kiểu dữ liệu phù hợp

        String maNV = txtMaNV.getText();
        try {
            Connection conn = DatabaseConnection.getConnection();
            String sql = "UPDATE TAIKHOAN SET Username = ?, Password = ?, Role = ?, maNV = ? WHERE ID = ?";
            PreparedStatement preparedStatement = conn.prepareStatement(sql);
            preparedStatement.setString(1, Username);
            preparedStatement.setString(2, Password);
            preparedStatement.setString(3, QuyenTK);
            preparedStatement.setString(4, maNV);
            preparedStatement.setString(5, idTK);

            int rowsUpdated = preparedStatement.executeUpdate();

            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Sửa thông tin tài khoản thành công!", "Thành công", JOptionPane.INFORMATION_MESSAGE);
                // Nạp lại dữ liệu bảng sau khi cập nhật
                loadDataToTable();
                txtIDTK.setText("");
                txtUsername.setText("");
                txtPassWord.setText("");
                txtMaNV.setText("");
            } else {
                JOptionPane.showMessageDialog(this, "Không thể sửa thông tin sản phẩm!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật thông tin: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void cBQuyenTKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cBQuyenTKActionPerformed
        
    }//GEN-LAST:event_cBQuyenTKActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormTaiKhoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormTaiKhoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormTaiKhoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormTaiKhoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormTaiKhoan().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cBQuyenTK;
    private javax.swing.JLabel jbDanhSachSanPham;
    private javax.swing.JTable tableSanPham;
    private javax.swing.JTextField txtIDTK;
    private javax.swing.JTextField txtMaNV;
    private javax.swing.JTextField txtPassWord;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
